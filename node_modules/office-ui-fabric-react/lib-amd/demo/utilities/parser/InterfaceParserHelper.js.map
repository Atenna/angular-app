{"version":3,"sources":["demo/utilities/parser/InterfaceParserHelper.ts"],"names":[],"mappings":"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","file":"demo/utilities/parser/InterfaceParserHelper.js","sourcesContent":["import { BaseParser } from './BaseParser';\r\nimport { IInterfaceProperty, InterfacePropertyType } from '../../components/index';\r\n\r\nconst JSDOC_DEFAULT = '@default';\r\nconst JSDOC_DEFAULTVALUE = '@defaultvalue';\r\nconst JSDOC_DEPRECATED = '@deprecated';\r\n/**\r\n * Supporting enum for the parser, used internally within the parser only.\r\n */\r\nenum ParseState {\r\n  default, comment, declaration\r\n}\r\n\r\n/**\r\n * Helper Parser that parses interfaces.\r\n */\r\nexport class InterfaceParserHelper extends BaseParser {\r\n  private _state: ParseState = ParseState.default;\r\n\r\n  /**\r\n   * @constructor\r\n   * Helper Parser that parses interfaces.\r\n   */\r\n  public constructor(str: string) {\r\n    super(str);\r\n  }\r\n\r\n  public parse(): Array<IInterfaceProperty> {\r\n    let bank: Array<string> = [];\r\n    let comment = '';\r\n    let identifierName = '';\r\n    let type = '';\r\n    let returnResult = [];\r\n    let defaultValue = '';\r\n    let isDeprecated = false;\r\n    let deprecatedMessage = '';\r\n    let noClosingSymbolAsteriskPrereq = false;\r\n\r\n    this.eatUntil(/\\{/);\r\n    this.eat('{');\r\n\r\n    do {\r\n      switch (this._state) {\r\n        case ParseState.default:\r\n          this.eatSpacesAndNewlines();\r\n          if (this.eat('/')) {\r\n            if (this.peek() === '*') {\r\n              this._state = ParseState.comment;\r\n            } else {\r\n              // ignore // comments\r\n              this.eatUntil(/[\\n]/);\r\n            }\r\n          } else if (this.eat('}')) {\r\n            // closing\r\n            break;\r\n          }else {\r\n            this._state = ParseState.declaration;\r\n          }\r\n\r\n          break;\r\n        case ParseState.comment:\r\n          {\r\n            // the initial * are always the first * of a comment, and will be treated as decorative\r\n            let asterisk = this.eatWhile('*');\r\n            if ((noClosingSymbolAsteriskPrereq || asterisk.length > 0) && this.eat('/')) {\r\n              // encountered closing comment tag\r\n              comment = bank.join('').trim();\r\n              bank = [];\r\n              this._state = ParseState.default;\r\n              break;\r\n            }\r\n\r\n            noClosingSymbolAsteriskPrereq = false;\r\n\r\n            let tmp = this.eatUntil(/[\\n\\*@]/);\r\n            bank.push(tmp);\r\n\r\n            if (this.peek() === '*') {\r\n              let tmp = this.eatWhile('*');\r\n              if (this.peek() !== '/') {\r\n                // encountered a line like '* This is a comment with asterisks in the middle **** like this.'\r\n                bank.push(tmp);\r\n              } else {\r\n                // we have already encountered *, and the next symbol is /\r\n                noClosingSymbolAsteriskPrereq = true;\r\n              }\r\n            } else if (this.peek() === '\\n') {\r\n              // go to next line\r\n              this.eatSpacesAndNewlines();\r\n            } else if (this.peek() === '@') {\r\n              if (this.eatWord(JSDOC_DEFAULTVALUE) || this.eatWord(JSDOC_DEFAULT)) {\r\n                // this parser assumes @default values won't have a bunch of asterisks in the middle of it.\r\n                let tmp = this.eatUntil(/[\\*\\n]/);\r\n                defaultValue = tmp;\r\n                this.eatSpacesAndNewlines();\r\n              } else if (this.eatWord(JSDOC_DEPRECATED)) {\r\n                let tmp = this.eatUntil(/[\\*\\n]/);\r\n                isDeprecated = true;\r\n                deprecatedMessage = tmp;\r\n              } else {\r\n                bank.push(this.eat('@'));\r\n              }\r\n            }\r\n          }\r\n          break;\r\n        case ParseState.declaration:\r\n          {\r\n            this.eatSpacesAndNewlines();\r\n            let tmp = this.eatUntil(/[\\:\\;=]/);\r\n            identifierName = tmp.trim();\r\n            if (this.eat(':')) {\r\n              tmp = this.eatUntil(/\\;/);\r\n              type = tmp;\r\n\r\n            } else {\r\n              // encountered semicolon or =\r\n              type = 'unspecified';\r\n            }\r\n\r\n            this.eat(';'); // actually eat the semicolon\r\n\r\n            let isOptional = identifierName[identifierName.length - 1] === '?';\r\n            let propType = isDeprecated ? InterfacePropertyType.deprecated : (isOptional ? InterfacePropertyType.optional : InterfacePropertyType.required);\r\n\r\n            this._state = ParseState.default;\r\n            returnResult.push(<IInterfaceProperty>{\r\n              description: comment,\r\n              name: identifierName,\r\n              type,\r\n              defaultValue: defaultValue,\r\n              interfacePropertyType: propType,\r\n              deprecatedMessage\r\n            });\r\n\r\n            comment = identifierName = type = defaultValue = '';\r\n          }\r\n          break;\r\n      }\r\n    } while (this.hasNext());\r\n\r\n    this.reset();\r\n    return returnResult;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}