{"version":3,"sources":["demo/pages/ProgressIndicatorPage/examples/ProgressIndicator.Basic.Example.tsx"],"names":[],"mappings":";;;;;;;IAUA,IAAM,cAAc,GAAW,GAAG,CAAC;IACnC,IAAM,kBAAkB,GAAW,GAAG,CAAC;IACvC,IAAM,iBAAiB,GAAW,IAAI,CAAC;IAEvC;QAAmD,iDAAyD;QAK1G;YACE,iBAAO,CAAC;YAER,IAAI,CAAC,MAAM,GAAG,IAAI,aAAK,CAAC,IAAI,CAAC,CAAC;YAE9B,IAAI,CAAC,KAAK,GAAG;gBACT,eAAe,EAAE,CAAC;aACrB,CAAC;YACF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/D,CAAC;QAEM,yDAAiB,GAAxB;YACE,IAAI,CAAC,kBAAkB,EAAE,CAAC;QAC5B,CAAC;QAEM,4DAAoB,GAA3B;YACE,IAAI,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;QACxB,CAAC;QAEM,8CAAM,GAAb;YACQ,gDAAe,CAAgB;YAErC,MAAM,CAAC,CACL,oBAAC,yBAAiB,GAChB,KAAK,EAAC,eAAe,EACrB,WAAW,EAAC,qBAAqB,EACjC,eAAe,EAAG,eAAiB,EAAG,CACzC,CAAC;QACJ,CAAC;QAEO,0DAAkB,GAA1B;YAAA,iBAoBC;YAnBC,iBAAiB;YACjB,IAAI,CAAC,QAAQ,CAAC;gBACV,eAAe,EAAE,CAAC;aACrB,CAAC,CAAC;YAEH,kBAAkB;YAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC;gBACvC,IAAI,eAAe,GAAG,KAAI,CAAC,KAAK,CAAC,eAAe,GAAG,kBAAkB,CAAC;gBAEtE,6CAA6C;gBAC7C,EAAE,CAAC,CAAC,eAAe,IAAI,GAAG,CAAC,CAAC,CAAC;oBAC3B,eAAe,GAAG,GAAG,CAAC;oBACtB,KAAI,CAAC,MAAM,CAAC,aAAa,CAAC,KAAI,CAAC,SAAS,CAAC,CAAC;oBAC1C,KAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,CAAC;gBACrE,CAAC;gBACD,KAAI,CAAC,QAAQ,CAAC;oBACV,eAAe,EAAE,eAAe;iBACnC,CAAC,CAAC;YACL,CAAC,EAAE,cAAc,CAAC,CAAC;QACrB,CAAC;QACH,oCAAC;IAAD,CAxDA,AAwDC,CAxDkD,KAAK,CAAC,SAAS,GAwDjE;IAxDY,qCAA6B,gCAwDzC,CAAA","file":"demo/pages/ProgressIndicatorPage/examples/ProgressIndicator.Basic.Example.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ProgressIndicator\r\n} from '../../../../index';\r\nimport { Async } from '../../../../utilities/Async/Async';\r\n\r\nexport interface IProgressIndicatorBasicExampleState {\r\n    percentComplete: number;\r\n}\r\n\r\nconst INTERVAL_DELAY: number = 100;\r\nconst INTERVAL_INCREMENT: number = .01;\r\nconst RESTART_WAIT_TIME: number = 2000;\r\n\r\nexport class ProgressIndicatorBasicExample extends React.Component<any, IProgressIndicatorBasicExampleState> {\r\n\r\n  private _interval: number;\r\n  private _async: Async;\r\n\r\n  constructor() {\r\n    super();\r\n\r\n    this._async = new Async(this);\r\n\r\n    this.state = {\r\n        percentComplete: 0\r\n    };\r\n    this._startProgressDemo = this._startProgressDemo.bind(this);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._startProgressDemo();\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._async.dispose();\r\n  }\r\n\r\n  public render() {\r\n    let { percentComplete } = this.state;\r\n\r\n    return (\r\n      <ProgressIndicator\r\n        label='Example title'\r\n        description='Example description'\r\n        percentComplete={ percentComplete } />\r\n    );\r\n  }\r\n\r\n  private _startProgressDemo() {\r\n    // reset the demo\r\n    this.setState({\r\n        percentComplete: 0\r\n    });\r\n\r\n    // update progress\r\n    this._interval = this._async.setInterval(() => {\r\n      let percentComplete = this.state.percentComplete + INTERVAL_INCREMENT;\r\n\r\n      // once complete, set the demo to start again\r\n      if (percentComplete >= 1.0) {\r\n        percentComplete = 1.0;\r\n        this._async.clearInterval(this._interval);\r\n        this._async.setTimeout(this._startProgressDemo, RESTART_WAIT_TIME);\r\n      }\r\n      this.setState({\r\n          percentComplete: percentComplete\r\n      });\r\n    }, INTERVAL_DELAY);\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}