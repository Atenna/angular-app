{"version":3,"sources":["demo/pages/ButtonPage/ButtonPage.tsx"],"names":[],"mappings":"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","file":"demo/pages/ButtonPage/ButtonPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  PropertiesTableSet,\r\n  ComponentPage\r\n} from '../../components/index';\r\n\r\nimport { Checkbox } from '../../../index';\r\n\r\nimport { ButtonNormalExample } from './examples/Button.Normal.Example';\r\nimport { ButtonPrimaryExample } from './examples/Button.Primary.Example';\r\nimport { ButtonHeroExample } from './examples/Button.Hero.Example';\r\nimport { ButtonCompoundExample } from './examples/Button.Compound.Example';\r\nimport { ButtonCommandExample } from './examples/Button.Command.Example';\r\nimport { ButtonIconExample } from './examples/Button.Icon.Example';\r\nimport { ButtonAnchorExample } from './examples/Button.Anchor.Example';\r\nimport { ButtonScreenReaderExample } from './examples/Button.ScreenReader.Example';\r\nimport { getPageRouteFromState } from '../../utilities/pageroute';\r\nimport { AppState } from '../../components/App/AppState';\r\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\r\nimport { IButtonDemoPageState } from './examples/IButtonDemoPageState';\r\nimport './examples/Button.Basic.Example.scss';\r\n\r\nconst ButtonNormalExampleCode = require('./examples/Button.Normal.Example.tsx');\r\nconst ButtonPrimaryExampleCode = require('./examples/Button.Primary.Example.tsx');\r\nconst ButtonHeroExampleCode = require('./examples/Button.Hero.Example.tsx');\r\nconst ButtonCompoundExampleCode = require('./examples/Button.Compound.Example.tsx');\r\nconst ButtonCommandExampleCode = require('./examples/Button.Command.Example.tsx');\r\nconst ButtonIconExampleCode = require('./examples/Button.Icon.Example.tsx');\r\nconst ButtonAnchorExampleCode = require('./examples/Button.Anchor.Example.tsx');\r\nconst ButtonScreenReaderExampleCode = require('./examples/Button.ScreenReader.Example.tsx');\r\n\r\nexport class ButtonPage extends React.Component<IComponentDemoPageProps, IButtonDemoPageState> {\r\n  private _url: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      areButtonsDisabled: false\r\n    };\r\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Button');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Button'\r\n        componentName='ButtonExample'\r\n        exampleCards={\r\n          <div>\r\n            <Checkbox label='Disable buttons' checked={ this.state.areButtonsDisabled } onChange={ this._onDisabledChanged.bind(this) } />\r\n            <ExampleCard title='Normal Button' code={ ButtonNormalExampleCode }>\r\n              <ButtonNormalExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Primary Button' code={ ButtonPrimaryExampleCode }>\r\n              <ButtonPrimaryExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Hero Button' code={ ButtonHeroExampleCode }>\r\n              <ButtonHeroExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Compound Button' code={ ButtonCompoundExampleCode }>\r\n              <ButtonCompoundExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Command Button' code={ ButtonCommandExampleCode }>\r\n              <ButtonCommandExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Icon Button' code={ ButtonIconExampleCode }>\r\n              <ButtonIconExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button Like Anchor' code={ ButtonAnchorExampleCode }>\r\n              <ButtonAnchorExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n            <ExampleCard title='Button with Aria Description for Screen Reader' code={ ButtonScreenReaderExampleCode }>\r\n              <ButtonScreenReaderExample disabled={ this.state.areButtonsDisabled } />\r\n            </ExampleCard>\r\n          </div>\r\n        }\r\n        propertiesTables={\r\n          <div>\r\n            <PropertiesTableSet componentName='Button' />\r\n            <p>Besides the above properties, the <code>Button</code> component accepts all properties that the React <code>button</code> and <code>a</code> components accept.</p>\r\n          </div>\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>Buttons are best used to enable a user to commit a change or complete steps in a task. They are typically found inside forms, dialogs, panels or pages. An example of their usage is confirming the deletion of a file in a confirmation dialog.</p>\r\n            <p>When considering their place in a layout, contemplate the order in which a user will flow through the UI. As an example, in a form, the individual will need to read and interact with the form fields before submiting the form. Therefore, as a general rule, the button should be placed at the bottom of the UI container (a dialog, panel, or page) which holds the related UI elements.</p>\r\n            <p>While buttons can technically be used to navigate a user to another part of the experience, this is not recommended unless that navigation is part of an action or their flow.</p>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://github.com/OfficeDev/office-ui-fabric-js/blob/master/ghdocs/components/Button.md'>Fabric JS</a>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Make sure the label conveys a clear purpose of the button to the user.</li>\r\n              <li>Button labels must describe the action the button will perform and should include a verb. Use concise, specific, self-explanatory labels, usually a single word.</li>\r\n              <li>Buttons should always include a noun if there is any room for interpretation about what the verb operates on.</li>\r\n              <li>Consider the affect localization will have on the button and what will happen to components around it.</li>\r\n              <li>If the buttonâ€™s label content is dynamic, consider how the button will resize and what will happen to components around it.</li>\r\n              <li>Use only a single line of text in the label of the button.</li>\r\n              <li>Expose only one or two buttons to the user at a time, for example, \"Accept\" and \"Cancel\". If you need to expose more actions to the user, consider using checkboxes or radio buttons from which the user can select actions, with a single command button to trigger those actions.</li>\r\n              <li>Show only one primary button that inherits theme color at rest state. In the event there are more than two buttons with equal priority, all buttons should have neutral backgrounds.</li>\r\n              <li>\"Submit\", \"OK\", and \"Apply\" buttons should always be styled as primary buttons. When \"Reset\" or \"Cancel\" buttons appear alongside one of the above, they should be styled as secondary buttons.</li>\r\n              <li>Default buttons should always perform safe operations. For example, a default button should never delete.</li>\r\n              <li>Use task buttons to cause actions that complete a task or cause a transitional task. Do not use buttons to toggle other UX in the same context. For example, a button may be used to open an interface area but should not be used to open an additional set of components in the same interface.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use generic labels like \"Ok,\" especially in the case of an error; errors are never \"Ok.\"</li>\r\n              <li>Donâ€™t place the default focus on a button that destroys data. Instead, place the default focus on the button that performs the \"safe act\" and retains the content (i.e. \"Save\") or cancels the action (i.e. \"Cancel\").</li>\r\n              <li>Donâ€™t use a button to navigate to another place, use a link instead. The exception is in a wizard where \"Back\" and \"Next\" buttons may be used.</li>\r\n              <li>Donâ€™t put too much text in a button - try to keep the length of your text to a minimum.</li>\r\n              <li>Don't put anything other than text in a button.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        route={ this._url }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n\r\n  private _onDisabledChanged(ev: React.MouseEvent<HTMLElement>, disabled: boolean) {\r\n    this.setState({\r\n      areButtonsDisabled: disabled\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}