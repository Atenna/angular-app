{"version":3,"sources":["demo/pages/Facepile/examples/Facepile.Overflow.Example.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;IAWA,IAAM,aAAa,GAAmB;QACpC,QAAQ,EAAE,sCAAgB;QAC1B,sBAAsB,EAAE,CAAC;QACzB,kBAAkB,EAAE,0BAAkB,CAAC,SAAS;QAChD,mBAAmB,EAAE;YACnB,OAAO,EAAE,UAAC,EAAuC;gBAC/C,OAAA,KAAK,CAAC,uBAAuB,CAAC;YAA9B,CAA8B;SACjC;KACF,CAAC;IAOF;QAA6C,2CAAmD;QAC9F;YACE,iBAAO,CAAC;YAER,IAAI,CAAC,KAAK,GAAG;gBACX,iBAAiB,EAAE,CAAC;gBACpB,kBAAkB,EAAE,0BAAkB,CAAC,IAAI;aAC5C,CAAC;QACJ,CAAC;QAEM,wCAAM,GAAb;YAAA,iBAuCC;YAtCC,IAAA,eAA0D,EAApD,wCAAiB,EAAE,0CAAkB,CAAgB;YAC3D,aAAa,CAAC,sBAAsB,GAAG,iBAAiB,CAAC;YACzD,aAAa,CAAC,kBAAkB,GAAG,kBAAkB,CAAC;YAEtD,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAE,oBAAqB;gBACnC,oBAAC,gBAAQ,eAAK,aAAa,EAAI;gBAC/B,oBAAC,cAAM,GACL,KAAK,EAAC,2BAA2B,EACjC,GAAG,EAAE,CAAE,EACP,GAAG,EAAE,CAAE,EACP,IAAI,EAAE,CAAE,EACR,SAAS,EAAE,IAAK,EAChB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,iBAAkB,EACpC,QAAQ,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,UAAC,SAAwC;oBACxE,SAAS,CAAC,iBAAiB,GAAG,KAAK,CAAC;oBACpC,MAAM,CAAC,SAAS,CAAC;gBACnB,CAAC,CAAC,EAHiB,CAGhB,EACD;gBACJ,oBAAC,gBAAQ,GACP,KAAK,EAAC,gBAAgB,EACtB,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,kBAAmB,EAC3C,OAAO,EACL;oBACE,EAAE,GAAG,EAAE,0BAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,0BAAkB,CAAC,0BAAkB,CAAC,IAAI,CAAC,EAAE;oBACnF,EAAE,GAAG,EAAE,0BAAkB,CAAC,WAAW,EAAE,IAAI,EAAE,0BAAkB,CAAC,0BAAkB,CAAC,WAAW,CAAC,EAAE;oBACjG,EAAE,GAAG,EAAE,0BAAkB,CAAC,SAAS,EAAE,IAAI,EAAE,0BAAkB,CAAC,0BAAkB,CAAC,SAAS,CAAC,EAAE;oBAC7F,EAAE,GAAG,EAAE,0BAAkB,CAAC,IAAI,EAAE,IAAI,EAAE,0BAAkB,CAAC,0BAAkB,CAAC,IAAI,CAAC,EAAE;iBAGtF,EACD,SAAS,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,QAAQ,CAAC,UAAC,SAAwC;oBACzE,SAAS,CAAC,kBAAkB,GAAG,KAAK,CAAC,GAAyB,CAAC;oBAC/D,MAAM,CAAC,SAAS,CAAC;gBACnB,CAAC,CAAC,EAHkB,CAGjB,EACD,CACA,CACP,CAAC;QACJ,CAAC;QACH,8BAAC;IAAD,CAlDA,AAkDC,CAlD4C,KAAK,CAAC,SAAS,GAkD3D;IAlDY,+BAAuB,0BAkDnC,CAAA","file":"demo/pages/Facepile/examples/Facepile.Overflow.Example.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Dropdown,\r\n  IFacepileProps,\r\n  Facepile,\r\n  OverflowButtonType,\r\n  Slider\r\n} from '../../../../index';\r\nimport { facepilePersonas } from './FacepileExampleData';\r\nimport './Facepile.Examples.scss';\r\n\r\nconst facepileProps: IFacepileProps = {\r\n  personas: facepilePersonas,\r\n  maxDisplayablePersonas: 5,\r\n  overflowButtonType: OverflowButtonType.downArrow,\r\n  overflowButtonProps: {\r\n    onClick: (ev: React.MouseEvent<HTMLButtonElement>) =>\r\n      alert('overflow icon clicked')\r\n  }\r\n};\r\n\r\nexport interface IFacepileOverflowExampleState {\r\n  displayedPersonas: any;\r\n  overflowButtonType: OverflowButtonType;\r\n}\r\n\r\nexport class FacepileOverflowExample extends React.Component<any, IFacepileOverflowExampleState> {\r\n  public constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      displayedPersonas: 5,\r\n      overflowButtonType: OverflowButtonType.none\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { displayedPersonas, overflowButtonType } = this.state;\r\n    facepileProps.maxDisplayablePersonas = displayedPersonas;\r\n    facepileProps.overflowButtonType = overflowButtonType;\r\n\r\n    return (\r\n      <div className={'ms-FacepileExample'}>\r\n        <Facepile {...facepileProps} />\r\n        <Slider\r\n          label='Number of Personas Shown:'\r\n          min={0}\r\n          max={6}\r\n          step={1}\r\n          showValue={true}\r\n          value={this.state.displayedPersonas}\r\n          onChange={value => this.setState((prevState: IFacepileOverflowExampleState) => {\r\n            prevState.displayedPersonas = value;\r\n            return prevState;\r\n          })}\r\n          />\r\n        <Dropdown\r\n          label='Overflow Type:'\r\n          selectedKey={this.state.overflowButtonType}\r\n          options={\r\n            [\r\n              { key: OverflowButtonType.none, text: OverflowButtonType[OverflowButtonType.none] },\r\n              { key: OverflowButtonType.descriptive, text: OverflowButtonType[OverflowButtonType.descriptive] },\r\n              { key: OverflowButtonType.downArrow, text: OverflowButtonType[OverflowButtonType.downArrow] },\r\n              { key: OverflowButtonType.more, text: OverflowButtonType[OverflowButtonType.more] },\r\n\r\n            ]\r\n          }\r\n          onChanged={value => this.setState((prevState: IFacepileOverflowExampleState) => {\r\n            prevState.overflowButtonType = value.key as OverflowButtonType;\r\n            return prevState;\r\n          })}\r\n          />\r\n      </div>\r\n    );\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\..\\src"}