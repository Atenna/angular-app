{"version":3,"sources":["components/pickers/BasePicker.test.tsx"],"names":[],"mappings":"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","file":"components/pickers/BasePicker.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nlet { expect } = chai;\r\n\r\nimport { TagPicker, ITag, BasePicker, IBasePickerProps, IPickerItemProps } from './index';\r\n\r\nfunction onResolveSuggestions(text: string): ITag[] {\r\n  return [\r\n    'black',\r\n    'blue',\r\n    'brown',\r\n    'cyan',\r\n    'green',\r\n    'magenta',\r\n    'mauve',\r\n    'orange',\r\n    'pink',\r\n    'purple',\r\n    'red',\r\n    'rose',\r\n    'violet',\r\n    'white',\r\n    'yellow'\r\n  ].filter(tag => tag.toLowerCase().indexOf(text.toLowerCase()) === 0).map(item => ({ key: item, name: item }));\r\n}\r\n\r\nconst basicRenderer = (props) => {\r\n  return <div> { props.item.name } </div>;\r\n};\r\n\r\nconst basicSuggestionRenderer = (props) => {\r\n  return <div> { props.name } </div>;\r\n};\r\n\r\nexport interface ISimple {\r\n  key: string;\r\n  name: string;\r\n}\r\n\r\nexport type TypedBasePicker = BasePicker<ISimple, IBasePickerProps<ISimple>>;\r\n\r\ndescribe('Pickers', () => {\r\n  describe('BasePicker', () => {\r\n    const BasePickerWithType = BasePicker as new (props: IBasePickerProps<ISimple>) => BasePicker<ISimple, IBasePickerProps<ISimple>>;\r\n    it('can provide custom renderers', () => {\r\n      let root = document.createElement('div');\r\n      document.body.appendChild(root);\r\n      let picker: TypedBasePicker = ReactDOM.render(\r\n        <BasePickerWithType\r\n          onResolveSuggestions={ onResolveSuggestions }\r\n          onRenderItem={ (props: IPickerItemProps<{ key: string, name: string }>) => <div key={ props.item.name }>{ basicRenderer(props) }</div> }\r\n          onRenderSuggestionsItem={ basicSuggestionRenderer }\r\n          />,\r\n        root\r\n      ) as TypedBasePicker;\r\n      let input = document.querySelector('.ms-BasePicker-input') as HTMLInputElement;\r\n      input.focus();\r\n      input.value = 'bl';\r\n\r\n      ReactTestUtils.Simulate.change(input);\r\n\r\n      let suggestions = document.querySelector('.ms-Suggestions') as HTMLInputElement;\r\n\r\n      expect(suggestions).to.exist;\r\n      let suggestionOptions = document.querySelectorAll('.ms-Suggestions-item');\r\n\r\n      expect(suggestionOptions.length).to.be.equal(2, 'There were not 2 suggestions');\r\n      ReactTestUtils.Simulate.click(suggestionOptions[0]);\r\n\r\n      expect(picker.items.length).to.be.equal(1, 'There was not only 1 item selected');\r\n      expect(picker.items[0].name).to.be.equal('black', 'The selected item did not have the correct text');\r\n\r\n      ReactDOM.unmountComponentAtNode(root);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  describe('TagPicker', () => {\r\n\r\n    it('can search for and select tags', () => {\r\n      let root = document.createElement('div');\r\n      document.body.appendChild(root);\r\n      let picker: TagPicker = ReactDOM.render(\r\n        <TagPicker\r\n          onResolveSuggestions={ onResolveSuggestions }\r\n          />,\r\n        root\r\n      ) as TagPicker;\r\n      let input = document.querySelector('.ms-BasePicker-input') as HTMLInputElement;\r\n      input.focus();\r\n      input.value = 'bl';\r\n\r\n      ReactTestUtils.Simulate.change(input);\r\n\r\n      let suggestions = document.querySelector('.ms-Suggestions') as HTMLInputElement;\r\n\r\n      expect(suggestions).to.exist;\r\n      let suggestionOptions = document.querySelectorAll('.ms-Suggestions-item');\r\n\r\n      expect(suggestionOptions.length).to.be.equal(2, 'There were not 2 suggestions');\r\n      ReactTestUtils.Simulate.click(suggestionOptions[0]);\r\n\r\n      expect(picker.items.length).to.be.equal(1, 'There was not only 1 item selected');\r\n      expect(picker.items[0].name).to.be.equal('black', 'The selected item did not have the correct text');\r\n      ReactDOM.unmountComponentAtNode(root);\r\n\r\n    });\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\src"}