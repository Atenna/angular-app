{"version":3,"sources":["components/pickers/Suggestions/Suggestions.tsx"],"names":[],"mappings":"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","file":"components/pickers/Suggestions/Suggestions.js","sourcesContent":["import * as React from 'react';\r\nimport { Button, ButtonType } from '../../../Button';\r\nimport { css } from '../../../utilities/css';\r\nimport { ISuggestionItemProps, ISuggestionsProps } from './Suggestions.Props';\r\nimport { BaseComponent } from '../../../common/BaseComponent';\r\nimport { Spinner } from '../../../Spinner';\r\nimport './Suggestions.scss';\r\n\r\nexport class SuggestionsItem<T> extends React.Component<ISuggestionItemProps<T>, {}> {\r\n  public render() {\r\n    let {\r\n      suggestionModel,\r\n      RenderSuggestion,\r\n      onClick,\r\n      className\r\n    } = this.props;\r\n    return (\r\n      <Button\r\n        onClick={ onClick }\r\n        className={ css('ms-Suggestions-item', { 'is-suggested': suggestionModel.selected }, className) }\r\n        >\r\n        <RenderSuggestion { ...suggestionModel.item }/>\r\n      </Button>\r\n    );\r\n  }\r\n}\r\n\r\nexport class Suggestions<T> extends BaseComponent<ISuggestionsProps<T>, {}> {\r\n\r\n  protected _searchForMoreButton: Button;\r\n  protected _selectedElement: HTMLDivElement;\r\n  private SuggestionsItemOfProperType = SuggestionsItem as new (props: ISuggestionItemProps<T>) => SuggestionsItem<T>;\r\n\r\n  constructor(suggestionsProps: ISuggestionsProps<T>) {\r\n    super(suggestionsProps);\r\n    this._getMoreResults = this._getMoreResults.bind(this);\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    this.scrollSelected();\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      suggestionsHeaderText,\r\n      searchForMoreText,\r\n      className,\r\n      moreSuggestionsAvailable,\r\n      noResultsFoundText,\r\n      suggestions,\r\n      isLoading,\r\n      loadingText\r\n    } = this.props;\r\n\r\n    let noResults: JSX.Element = noResultsFoundText ? <div className='ms-Suggestions-none'>\r\n      { noResultsFoundText }\r\n    </div> : null;\r\n\r\n    return (\r\n      <div className={ css('ms-Suggestions', className ? className : '') }>\r\n        { suggestionsHeaderText ?\r\n          (<div className='ms-Suggestions-title'>\r\n            { suggestionsHeaderText }\r\n          </div>) : (null) }\r\n          { isLoading && (\r\n            <Spinner\r\n              className='ms-Suggestions-spinner'\r\n              label={ loadingText }\r\n              /> ) }\r\n        { (!suggestions || !suggestions.length) && !isLoading  ?\r\n          noResults :\r\n          this._renderSuggestions()\r\n        }\r\n        { searchForMoreText && moreSuggestionsAvailable ?\r\n          (<Button\r\n            onClick={ this._getMoreResults.bind(this) }\r\n            className={ 'ms-SearchMore-button' }\r\n            buttonType={ ButtonType.icon }\r\n            icon={ 'Search' }\r\n            ref={ this._resolveRef('_searchForMoreButton') } >\r\n            { searchForMoreText }\r\n          </Button>) : (null)\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focusSearchForMoreButton() {\r\n    if (this._searchForMoreButton) {\r\n      this._searchForMoreButton.focus();\r\n    }\r\n  }\r\n\r\n  // TODO get the element to scroll into view properly regardless of direction.\r\n  public scrollSelected() {\r\n    if (this._selectedElement) {\r\n      this._selectedElement.scrollIntoView(false);\r\n    }\r\n  }\r\n\r\n  private _renderSuggestions(): JSX.Element {\r\n    let {\r\n      suggestions,\r\n      onRenderSuggestion,\r\n      suggestionsItemClassName } = this.props;\r\n    let TypedSuggestionsItem = this.SuggestionsItemOfProperType;\r\n\r\n    return (\r\n      <div className='ms-Suggestions-container' id='suggestion-list' role='menu'>\r\n        { suggestions.map((suggestion, index) =>\r\n          <div ref={ this._resolveRef(suggestion.selected ? '_selectedElement' : '') }\r\n            key={ index }\r\n            id={ 'sug-' + index }\r\n            role='menuitem'>\r\n            <TypedSuggestionsItem\r\n              suggestionModel={ suggestion }\r\n              RenderSuggestion={ onRenderSuggestion }\r\n              onClick={ (ev: React.MouseEvent<HTMLElement>) => this.props.onSuggestionClick(ev, suggestion.item, index) }\r\n              className={ suggestionsItemClassName }\r\n              />\r\n          </div>) }\r\n      </div>);\r\n  }\r\n\r\n  private _getMoreResults() {\r\n    if (this.props.onGetMoreResults) {\r\n      this.props.onGetMoreResults();\r\n    }\r\n  }\r\n\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}