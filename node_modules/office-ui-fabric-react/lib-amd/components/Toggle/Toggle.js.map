{"version":3,"sources":["components/Toggle/Toggle.tsx"],"names":[],"mappings":"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","file":"components/Toggle/Toggle.js","sourcesContent":["import * as React from 'react';\r\nimport { IToggleProps } from './Toggle.Props';\r\nimport { css } from '../../utilities/css';\r\nimport { Label } from '../../Label';\r\nimport { getId } from '../../utilities/object';\r\nimport { autobind } from '../../utilities/autobind';\r\n\r\nimport './Toggle.scss';\r\n\r\nexport interface IToggleState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport class Toggle extends React.Component<IToggleProps, IToggleState> {\r\n\r\n  public static initialProps = {\r\n    label: '',\r\n    onText: 'On',\r\n    offText: 'Off'\r\n  };\r\n\r\n  private _id: string;\r\n  private _toggleButton: HTMLButtonElement;\r\n\r\n  constructor(props: IToggleProps) {\r\n    super();\r\n\r\n    this.state = {\r\n      isChecked: !!(props.checked || props.defaultChecked)\r\n    };\r\n\r\n    this._id = getId('Toggle');\r\n  }\r\n\r\n  /**\r\n   * Gets the current checked state of the toggle.\r\n   */\r\n  public get checked(): boolean {\r\n    return this.state.isChecked;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: IToggleProps) {\r\n    if (newProps.checked !== undefined) {\r\n      this.setState({\r\n        isChecked: newProps.checked\r\n      });\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { label, onText, offText, className, disabled } = this.props;\r\n    let { isChecked } = this.state;\r\n    let stateText = isChecked ? onText : offText;\r\n\r\n    return (\r\n      <div className={\r\n        css('ms-Toggle', className, {\r\n          'is-checked': isChecked,\r\n          'is-enabled': !disabled,\r\n          'is-disabled': disabled\r\n        })\r\n      }>\r\n        <div className='ms-Toggle-innerContainer'>\r\n          { label && (\r\n            <Label className='ms-Toggle-label' htmlFor={ this._id }>{ label }</Label>\r\n          ) }\r\n          <div className='ms-Toggle-slider'>\r\n            <button\r\n              ref={ (c): HTMLButtonElement => this._toggleButton = c }\r\n              type='button'\r\n              id={ this._id }\r\n              name={ this._id }\r\n              className='ms-Toggle-button'\r\n              disabled={ disabled }\r\n              role='checkbox'\r\n              aria-checked={ isChecked }\r\n              onClick={ this._onClick }\r\n              />\r\n            <div className='ms-Toggle-background'>\r\n              <div className='ms-Toggle-focus' />\r\n              <div className='ms-Toggle-thumb' />\r\n            </div>\r\n            { stateText && (\r\n              <Label className='ms-Toggle-stateText'>{ stateText }</Label>\r\n            ) }\r\n          </div>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public focus() {\r\n    if (this._toggleButton) {\r\n      this._toggleButton.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick() {\r\n    let { checked, onChanged } = this.props;\r\n    let { isChecked } = this.state;\r\n\r\n    // Only update the state if the user hasn't provided it.\r\n    if (checked === undefined) {\r\n      this.setState({\r\n        isChecked: !isChecked\r\n      });\r\n    }\r\n\r\n    if (onChanged) {\r\n      onChanged(!isChecked);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}