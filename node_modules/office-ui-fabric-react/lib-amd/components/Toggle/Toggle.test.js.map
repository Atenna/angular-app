{"version":3,"sources":["components/Toggle/Toggle.test.tsx"],"names":[],"mappings":";;IAOM,wBAAM,CAAU;IAItB,QAAQ,CAAC,QAAQ,EAAE;QAEjB,EAAE,CAAC,iBAAiB,EAAE;YACpB,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACX,CACL,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,YAAY,GAAG,WAAW,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC;YAEjE,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,6CAA6C,EAAE;YAChD,IAAI,cAAc,CAAC;YACnB,IAAI,QAAQ,GAAG,UAAC,SAAS;gBACvB,cAAc,GAAG,SAAS,CAAC;YAC7B,CAAC,CAAC;YACF,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,SAAS,EAAG,QAAU,EACpB,CACL,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YACtC,MAAM,CAAC,cAAc,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;YACtC,MAAM,CAAE,SAAuC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAClF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uDAAuD,EAAE;YAC1D,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,KAAK,EAAC,OAAO,EACb,OAAO,EAAG,KAAO,EACf,CACL,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,MAAM,GAAG,WAAW,CAAC,aAAa,CAAC,mBAAmB,CAAC,CAAC;YAE5D,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAEtC,MAAM,CAAE,SAAuC,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACnF,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,oDAAoD,EAAE;YACvD,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,OAAO,EAAG,KAAO,EACf,CACL,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,KAAK,GAAG,WAAW,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;YAE/C,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC;QACxB,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC","file":"components/Toggle/Toggle.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\n\r\nlet { expect } = chai;\r\n\r\nimport { Toggle } from './Toggle';\r\n\r\ndescribe('Toggle', () => {\r\n\r\n  it('renders a label', () => {\r\n    let component = ReactTestUtils.renderIntoDocument(\r\n      <Toggle\r\n        label='Label'\r\n        />\r\n    );\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let labelElement = renderedDOM.querySelector('.ms-Toggle-label');\r\n\r\n    expect(labelElement.textContent).to.equal('Label');\r\n  });\r\n\r\n  it('can call the callback on a change of toggle', () => {\r\n    let isToggledValue;\r\n    let callback = (isToggled) => {\r\n      isToggledValue = isToggled;\r\n    };\r\n    let component = ReactTestUtils.renderIntoDocument<React.ReactInstance>(\r\n      <Toggle\r\n        label='Label'\r\n        onChanged={ callback }\r\n        />\r\n    );\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\r\n\r\n    ReactTestUtils.Simulate.click(button);\r\n    expect(isToggledValue).to.equal(true);\r\n    expect((component as React.Component<any, any>).state.isChecked).to.equal(true);\r\n  });\r\n\r\n  it(`doesn't update the state if the user provides checked`, () => {\r\n    let component = ReactTestUtils.renderIntoDocument(\r\n      <Toggle\r\n        label='Label'\r\n        checked={ false }\r\n        />\r\n    );\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let button = renderedDOM.querySelector('.ms-Toggle-button');\r\n\r\n    ReactTestUtils.Simulate.click(button);\r\n\r\n    expect((component as React.Component<any, any>).state.isChecked).to.equal(false);\r\n  });\r\n\r\n  it(`doesn't render a label element if none is provided`, () => {\r\n    let component = ReactTestUtils.renderIntoDocument(\r\n      <Toggle\r\n        checked={ false }\r\n        />\r\n    );\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let label = renderedDOM.querySelector('label');\r\n\r\n    expect(label).is.null;\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}