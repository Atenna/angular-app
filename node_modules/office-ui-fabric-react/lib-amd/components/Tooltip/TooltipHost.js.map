{"version":3,"sources":["components/Tooltip/TooltipHost.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAUA;QAAiC,+BAAqC;QASpE,cAAc;QACd,qBAAY,KAAwB;YAClC,kBAAM,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,KAAK,GAAG;gBACX,gBAAgB,EAAE,KAAK;aACxB,CAAC;QACJ,CAAC;QAED,SAAS;QACF,4BAAM,GAAb;YACE,IAAA,eAA8D,EAAxD,oBAAO,EAAE,sBAAQ,EAAE,oCAAe,EAAE,gBAAK,CAAgB;YACzD,kDAAgB,CAAgB;YAEtC,MAAM,CAAC,CACL,qBAAC,GAAG,aACF,SAAS,EAAC,gBAAgB,EAC1B,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAG,GACnC,EAAE,cAAc,EAAE,IAAI,CAAC,oBAAoB,EAAE,EAC7C,EAAE,aAAa,EAAE,IAAI,CAAC,oBAAoB,EAAE,GACjD,YAAY,EAAG,IAAI,CAAC,oBAAsB,EAC1C,YAAY,EAAG,IAAI,CAAC,oBAAsB;gBAExC,QAAU;gBACV,gBAAgB,GAAG,CACnB,oBAAC,iBAAO,YACN,KAAK,EAAG,KAAO,EACf,OAAO,EAAG,OAAS,EACnB,aAAa,EAAG,IAAI,CAAC,YAAc,EACnC,eAAe,EAAG,eAAiB,GAC9B,2BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,0BAAa,CAAC,EAEtC,CACX,GAAG,CAAC,IAAI,CAAG,CACR,CACP,CAAC;QACJ,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAClC,IAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,IAAI;aACvB,CAAC,CAAC;QACL,CAAC;QAED,eAAe;QAEP,0CAAoB,GAA5B,UAA6B,EAAO;YAClC,IAAI,CAAC,QAAQ,CAAC;gBACZ,gBAAgB,EAAE,KAAK;aACxB,CAAC,CAAC;QACL,CAAC;QA3Da,wBAAY,GAAG;YAC3B,KAAK,EAAE,4BAAY,CAAC,MAAM;SAC3B,CAAC;QA4CF;YAAC,mBAAQ;+DAAA;QAQT;YAAC,mBAAQ;+DAAA;QAMX,kBAAC;IAAD,CA9DA,AA8DC,CA9DgC,6BAAa,GA8D7C;IA9DY,mBAAW,cA8DvB,CAAA","file":"components/Tooltip/TooltipHost.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport { BaseComponent } from '../../common/BaseComponent';\r\nimport { ITooltipHostProps } from './TooltipHost.Props';\r\nimport { getNativeProps, divProperties } from '../../utilities/properties';\r\nimport { autobind } from '../../utilities/autobind';\r\nimport { Tooltip } from './Tooltip';\r\nimport { TooltipDelay } from './Tooltip.Props';\r\n\r\nexport class TooltipHost extends BaseComponent<ITooltipHostProps, any> {\r\n\r\n  public static defaultProps = {\r\n    delay: TooltipDelay.medium\r\n  };\r\n\r\n  // The wrapping div that gets the hover events\r\n  private _tooltipHost: HTMLElement;\r\n\r\n  // Constructor\r\n  constructor(props: ITooltipHostProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isTooltipVisible: false,\r\n    };\r\n  }\r\n\r\n  // Render\r\n  public render() {\r\n    let { content, children, directionalHint, delay } = this.props;\r\n    let { isTooltipVisible } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className='ms-TooltipHost'\r\n        ref={ this._resolveRef('_tooltipHost') }\r\n        { ...{ onFocusCapture: this._onTooltipMouseEnter } }\r\n        { ...{ onBlurCapture: this._onTooltipMouseLeave } }\r\n        onMouseEnter={ this._onTooltipMouseEnter }\r\n        onMouseLeave={ this._onTooltipMouseLeave }\r\n        >\r\n        { children }\r\n        { isTooltipVisible ? (\r\n          <Tooltip\r\n            delay={ delay }\r\n            content={ content }\r\n            targetElement={ this._tooltipHost }\r\n            directionalHint={ directionalHint }\r\n            { ...getNativeProps(this.props, divProperties) }\r\n            >\r\n          </Tooltip>\r\n        ) : (null) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show Tooltip\r\n  @autobind\r\n  private _onTooltipMouseEnter(ev: any) {\r\n    this.setState({\r\n      isTooltipVisible: true\r\n    });\r\n  }\r\n\r\n  // Hide Tooltip\r\n  @autobind\r\n  private _onTooltipMouseLeave(ev: any) {\r\n    this.setState({\r\n      isTooltipVisible: false\r\n    });\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}