{"version":3,"sources":["components/DatePicker/DatePicker.tsx"],"names":[],"mappings":"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","file":"components/DatePicker/DatePicker.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IDatePickerProps\r\n} from './DatePicker.Props';\r\nimport {\r\n  Calendar,\r\n  DayOfWeek\r\n} from '../../Calendar';\r\nimport { Callout } from '../../Callout';\r\nimport { DirectionalHint } from '../../common/DirectionalHint';\r\nimport { TextField } from '../../TextField';\r\nimport {\r\n  autobind,\r\n  BaseComponent,\r\n  KeyCodes,\r\n  css\r\n} from '../../Utilities';\r\nimport './DatePicker.scss';\r\n\r\nexport interface IDatePickerState {\r\n  /** The currently focused date in the drop down, but not necessarily selected */\r\n  navigatedDate?: Date;\r\n  selectedDate?: Date;\r\n  formattedDate?: string;\r\n  isDatePickerShown?: boolean;\r\n  errorMessage?: string;\r\n}\r\n\r\nexport class DatePicker extends BaseComponent<IDatePickerProps, IDatePickerState> {\r\n  public static defaultProps: IDatePickerProps = {\r\n    allowTextInput: false,\r\n    formatDate: (date: Date) => {\r\n      if (date) {\r\n        return date.toDateString();\r\n      }\r\n\r\n      return '';\r\n    },\r\n    parseDateFromString: (dateStr: string) => {\r\n      const date = Date.parse(dateStr);\r\n      if (date) {\r\n        return new Date(date);\r\n      }\r\n\r\n      return null;\r\n    },\r\n    firstDayOfWeek: DayOfWeek.Sunday,\r\n    isRequired: false,\r\n    isMonthPickerVisible: true,\r\n    strings: null\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance;\r\n    root: HTMLElement;\r\n    textField: TextField;\r\n  };\r\n\r\n  private _calendar: Calendar;\r\n  private _datepicker: HTMLDivElement;\r\n  private _preventFocusOpeningPicker: boolean;\r\n  private _focusOnSelectedDateOnUpdate: boolean;\r\n\r\n  constructor(props: IDatePickerProps) {\r\n    super();\r\n\r\n    let { formatDate, value } = props;\r\n\r\n    this.state = {\r\n      selectedDate: value || new Date(),\r\n      formattedDate: (formatDate && value) ? formatDate(value) : '',\r\n      isDatePickerShown: false,\r\n      errorMessage: null\r\n    };\r\n\r\n    this._preventFocusOpeningPicker = false;\r\n  }\r\n\r\n  public componentWillReceiveProps(nextProps: IDatePickerProps) {\r\n    let { formatDate, isRequired, strings, value } = nextProps;\r\n    const errorMessage = (isRequired && !value) ? (strings.isRequiredErrorMessage || '*') : null;\r\n\r\n    this.setState({\r\n      selectedDate: value || new Date(),\r\n      formattedDate: (formatDate && value) ? formatDate(value) : '',\r\n      errorMessage: errorMessage\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    let rootClass = 'ms-DatePicker';\r\n    let { firstDayOfWeek, strings, label, isRequired, ariaLabel, placeholder, allowTextInput } = this.props;\r\n    let { isDatePickerShown, formattedDate, selectedDate, errorMessage } = this.state;\r\n\r\n    return (\r\n      <div className={ rootClass } ref='root'>\r\n        <div ref={ (c): HTMLElement => this._datepicker = c }>\r\n          <TextField\r\n            ariaLabel={ ariaLabel }\r\n            aria-haspopup='true'\r\n            required={ isRequired }\r\n            onKeyDown={ this._onTextFieldKeyDown }\r\n            onFocus={ this._onTextFieldFocus }\r\n            onBlur={ this._onTextFieldBlur }\r\n            onClick={ this._onTextFieldClick }\r\n            onChanged={ this._onTextFieldChanged }\r\n            errorMessage={ errorMessage }\r\n            label={ label }\r\n            placeholder={ placeholder }\r\n            iconClass={ css(\r\n              'ms-Icon ms-Icon--Calendar',\r\n              label ? 'ms-DatePicker-event--with-label' : 'ms-DatePicker-event--without-label'\r\n            ) }\r\n            readOnly={ !allowTextInput }\r\n            value={ formattedDate }\r\n            ref='textField' />\r\n        </div>\r\n        { isDatePickerShown && (\r\n          <Callout\r\n            isBeakVisible={ false }\r\n            className='ms-DatePicker-callout'\r\n            gapSpace={ 0 }\r\n            doNotLayer={ false }\r\n            targetElement={ this._datepicker }\r\n            directionalHint={ DirectionalHint.bottomLeftEdge }\r\n            onDismiss={ this._calendarDismissed }\r\n            onPositioned={ this._onCalloutPositioned }\r\n            >\r\n            <Calendar\r\n              onSelectDate={ this._onSelectDate }\r\n              onDismiss={ this._calendarDismissed }\r\n              isMonthPickerVisible={ this.props.isMonthPickerVisible }\r\n              value={ selectedDate }\r\n              firstDayOfWeek={ firstDayOfWeek }\r\n              strings={ strings }\r\n              ref={ this._resolveRef('_calendar') }\r\n              >\r\n            </Calendar>\r\n          </Callout>\r\n        ) }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onSelectDate(date: Date) {\r\n    let { formatDate, onSelectDate } = this.props;\r\n\r\n    this.setState({\r\n      selectedDate: date,\r\n      isDatePickerShown: false,\r\n      formattedDate: formatDate && date ? formatDate(date) : '',\r\n    });\r\n\r\n    if (onSelectDate) {\r\n      onSelectDate(date);\r\n    }\r\n  };\r\n\r\n  @autobind\r\n  private _onCalloutPositioned() {\r\n    this._calendar.focus();\r\n  }\r\n\r\n  @autobind\r\n  private _onTextFieldFocus(ev: React.FocusEvent<HTMLElement>) {\r\n    if (!this.props.allowTextInput) {\r\n      if (!this._preventFocusOpeningPicker) {\r\n        this._showDatePickerPopup();\r\n      } else {\r\n        this._preventFocusOpeningPicker = false;\r\n      }\r\n    }\r\n  };\r\n\r\n  @autobind\r\n  private _onTextFieldBlur(ev: React.FocusEvent<HTMLElement>) {\r\n    this._validateTextInput();\r\n  };\r\n\r\n  @autobind\r\n  private _onTextFieldChanged(newValue: string) {\r\n    if (this.props.allowTextInput) {\r\n      if (this.state.isDatePickerShown) {\r\n        this._dismissDatePickerPopup();\r\n      }\r\n\r\n      let { isRequired, value, strings } = this.props;\r\n\r\n      this.setState({\r\n        errorMessage: (isRequired && !value) ? (strings.isRequiredErrorMessage || '*') : null,\r\n        formattedDate: newValue\r\n      });\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onTextFieldKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.enter:\r\n        ev.preventDefault();\r\n        ev.stopPropagation();\r\n        if (!this.state.isDatePickerShown) {\r\n          this._showDatePickerPopup();\r\n        } else {\r\n          // When DatePicker allows input date string directly,\r\n          // it is expected to hit another enter to close the popup\r\n          if (this.props.allowTextInput) {\r\n            this._dismissDatePickerPopup();\r\n          }\r\n        }\r\n        break;\r\n\r\n      case KeyCodes.escape:\r\n        this._handleEscKey(ev);\r\n        break;\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  @autobind\r\n  private _onTextFieldClick(ev: React.MouseEvent<HTMLElement>) {\r\n    if (!this.state.isDatePickerShown) {\r\n      this._showDatePickerPopup();\r\n    } else {\r\n      if (this.props.allowTextInput) {\r\n        this.setState({\r\n          isDatePickerShown: false\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  private _showDatePickerPopup() {\r\n    if (!this.state.isDatePickerShown) {\r\n      this._preventFocusOpeningPicker = true;\r\n      this._focusOnSelectedDateOnUpdate = true;\r\n      this.setState({\r\n        isDatePickerShown: true,\r\n        navigatedDate: this.state.selectedDate,\r\n        errorMessage: ''\r\n      });\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _dismissDatePickerPopup() {\r\n    if (this.state.isDatePickerShown) {\r\n      this.setState({\r\n        isDatePickerShown: false\r\n      });\r\n\r\n      this._validateTextInput();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback for closing the calendar callout\r\n   */\r\n  @autobind\r\n  private _calendarDismissed() {\r\n    this._preventFocusOpeningPicker = true;\r\n    this._dismissDatePickerPopup();\r\n  }\r\n\r\n  @autobind\r\n  private _handleEscKey(ev: React.KeyboardEvent<HTMLElement>) {\r\n    this._calendarDismissed();\r\n  }\r\n\r\n  @autobind\r\n  private _validateTextInput() {\r\n    let { isRequired, allowTextInput, strings, formatDate, parseDateFromString, onSelectDate } = this.props;\r\n    const inputValue: string = this.state.formattedDate;\r\n\r\n    // Do validation only if DatePicker's popup is dismissed\r\n    if (this.state.isDatePickerShown) {\r\n      return;\r\n    }\r\n\r\n    // Check when DatePicker is a required field but has NO input value\r\n    if (isRequired && !inputValue) {\r\n      this.setState({\r\n        // Since fabic react doesn't have loc support yet\r\n        // use the symbol '*' to represent error message\r\n        errorMessage: strings.isRequiredErrorMessage || '*'\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (allowTextInput) {\r\n      let date = null;\r\n      if (inputValue) {\r\n        date = parseDateFromString(inputValue);\r\n        if (!date) {\r\n          this.setState({\r\n            errorMessage: strings.invalidInputErrorMessage || '*'\r\n          });\r\n        } else {\r\n          this.setState({\r\n            selectedDate: date,\r\n            formattedDate: formatDate && date ? formatDate(date) : '',\r\n            errorMessage: ''\r\n          });\r\n        }\r\n      } else {\r\n        // No input date string shouldn't be an error if field is not required\r\n        this.setState({\r\n          errorMessage: ''\r\n        });\r\n      }\r\n\r\n      // Execute onSelectDate callback\r\n      if (onSelectDate) {\r\n        // If no input date string or input date string is invalid\r\n        // date variable will be null, callback should expect null value for this case\r\n        onSelectDate(date);\r\n      }\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}