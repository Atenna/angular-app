{"version":3,"sources":["components/Slider/Slider.test.tsx"],"names":[],"mappings":";;IAOM,wBAAM,CAAU;IAItB,QAAQ,CAAC,QAAQ,EAAE;QAEjB,EAAE,CAAC,kBAAkB,EAAE;YACrB,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GAAC,KAAK,EAAC,QAAQ,EAAG,CAC1B,CAAC;YACF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,YAAY,GAAG,WAAW,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC;YAE1D,MAAM,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;QACtD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,mDAAmD,EAAE;YACtD,IAAI,YAAY,CAAC;YACjB,IAAI,QAAQ,GAAG,UAAC,GAAG;gBACjB,YAAY,GAAG,GAAG,CAAC;YACrB,CAAC,CAAC;YACF,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,GACL,QAAQ,EAAG,QAAU,EACnB,CACL,CAAC;YAEF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,UAAU,GAAG,WAAW,CAAC,aAAa,CAAC,iBAAiB,CAAC,CAAC;YAC9D,IAAI,WAAW,GAAG,WAAW,CAAC,aAAa,CAAC,qBAAqB,CAAC,CAAC;YAEnE,UAAU,CAAC,qBAAqB,GAAG,cAAM,OAAA,CAAC;gBACxC,IAAI,EAAE,CAAC;gBACP,GAAG,EAAE,CAAC;gBACN,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,EAAE;gBACV,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,EAAE;aACX,CAAC,EAPuC,CAOvC,CAAC;YAEH,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE;gBAC7C,IAAI,EAAE,WAAW;gBACjB,OAAO,EAAE,GAAG;gBACZ,OAAO,EAAE,CAAC;aACX,CAAC,CAAC;YAEH,qBAAqB;YACrB,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;YAEhC,cAAc,CAAC,QAAQ,CAAC,SAAS,CAAC,WAAW,EAAE;gBAC7C,IAAI,EAAE,WAAW;gBACjB,OAAO,EAAE,CAAC;gBACV,OAAO,EAAE,CAAC;aACX,CAAC,CAAC;YAEH,oBAAoB;YACpB,MAAM,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,gCAAgC,EAAE;YACnC,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,eAAM,OAAG,CACX,CAAC;YAEF,IAAI,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAgC,CAAC,CAAC;YACzE,IAAI,UAAU,GAAG,WAAW,CAAC,gBAAgB,CAAC,QAAQ,CAAC,CAAC;YAExD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;gBAC3C,IAAI,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC;gBAE3B,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;YACvD,CAAC;QACH,CAAC,CAAC,CAAC;IAEL,CAAC,CAAC,CAAC","file":"components/Slider/Slider.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\n\r\nlet { expect } = chai;\r\n\r\nimport { Slider } from './Slider';\r\n\r\ndescribe('Slider', () => {\r\n\r\n  it('renders a slider', () => {\r\n    let component = ReactTestUtils.renderIntoDocument(\r\n      <Slider label='slider' />\r\n    );\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let labelElement = renderedDOM.querySelector('.ms-Label');\r\n\r\n    expect(labelElement.textContent).to.equal('slider');\r\n  });\r\n\r\n  it('can slide to default min/max and execute onChange', () => {\r\n    let changedValue;\r\n    let onChange = (val) => {\r\n      changedValue = val;\r\n    };\r\n    let component = ReactTestUtils.renderIntoDocument<React.ReactInstance>(\r\n      <Slider\r\n        onChange={ onChange }\r\n        />\r\n    );\r\n\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let sliderLine = renderedDOM.querySelector('.ms-Slider-line');\r\n    let sliderThumb = renderedDOM.querySelector('.ms-Slider-slideBox');\r\n\r\n    sliderLine.getBoundingClientRect = () => ({\r\n      left: 0,\r\n      top: 0,\r\n      right: 100,\r\n      bottom: 40,\r\n      width: 100,\r\n      height: 40\r\n    });\r\n\r\n    ReactTestUtils.Simulate.mouseDown(sliderThumb, {\r\n      type: 'mousedown',\r\n      clientX: 100,\r\n      clientY: 0\r\n    });\r\n\r\n    // Default max is 10.\r\n    expect(changedValue).equals(10);\r\n\r\n    ReactTestUtils.Simulate.mouseDown(sliderThumb, {\r\n      type: 'mousedown',\r\n      clientX: 0,\r\n      clientY: 0\r\n    });\r\n\r\n    // Default min is 0.\r\n    expect(changedValue).equals(0);\r\n  });\r\n\r\n  it('has type=button on all buttons', () => {\r\n    let component = ReactTestUtils.renderIntoDocument<React.ReactInstance>(\r\n      <Slider />\r\n    );\r\n\r\n    let renderedDOM = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    let allButtons = renderedDOM.querySelectorAll('button');\r\n\r\n    for (let i = 0; i < allButtons.length; i++) {\r\n      let button = allButtons[i];\r\n\r\n      expect(button.getAttribute('type')).equals('button');\r\n    }\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}