{"version":3,"sources":["components/TextField/TextField.test.tsx"],"names":[],"mappings":"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","file":"components/TextField/TextField.test.js","sourcesContent":["import 'es6-promise';\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\n\r\nimport { TextField } from './TextField';\r\n\r\nconst expect: Chai.ExpectStatic = chai.expect;\r\n\r\ndescribe('TextField', () => {\r\n  function renderIntoDocument(element: React.ReactElement<any>): HTMLElement {\r\n    const component = ReactTestUtils.renderIntoDocument(element);\r\n    const renderedDOM: Element = ReactDOM.findDOMNode(component as React.ReactInstance);\r\n    return renderedDOM as HTMLElement;\r\n  }\r\n\r\n  function mockEvent(targetValue: string = ''): React.SyntheticEvent<HTMLElement> {\r\n    const target: EventTarget = { value: targetValue } as HTMLInputElement;\r\n    const event: React.SyntheticEvent<HTMLElement> = { target } as React.SyntheticEvent<HTMLElement>;\r\n    return event;\r\n  }\r\n\r\n  function delay(millisecond: number): Promise<void> {\r\n    return new Promise<void>((resolve) => setTimeout(resolve, millisecond));\r\n  }\r\n\r\n  it('should render label and value to input element', () => {\r\n    const exampleLabel: string = 'this is label';\r\n    const exampleValue: string = 'this is value';\r\n\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField\r\n        label={ exampleLabel }\r\n        value={ exampleValue }\r\n        />\r\n    );\r\n\r\n    // Assert on the input element.\r\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\r\n    expect(inputDOM.value).to.equal(exampleValue);\r\n    expect(inputDOM.getAttribute('label')).to.equal(exampleLabel);\r\n\r\n    // Assert on the label element.\r\n    const labelDOM: HTMLLabelElement = renderedDOM.getElementsByTagName('label')[0];\r\n    expect(labelDOM.textContent).to.equal(exampleLabel);\r\n  });\r\n\r\n  it('should render multiline as text area element', () => {\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField value='This\\nIs\\nMultiline\\nText\\n' multiline />\r\n    );\r\n\r\n    // Assert on the input element.\r\n    const inputDOM: HTMLTextAreaElement = renderedDOM.getElementsByTagName('textarea')[0];\r\n    expect(inputDOM.value).not.be.be.empty;\r\n  });\r\n\r\n  it('should associate the label and input box', () => {\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField\r\n        label='text-field-label'\r\n        value='whatever value'\r\n        />\r\n    );\r\n\r\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\r\n    const labelDOM: HTMLLabelElement = renderedDOM.getElementsByTagName('label')[0];\r\n\r\n    // Assert the input ID and label FOR attribute are the same.\r\n    expect(inputDOM.id).to.not.be.empty;\r\n    expect(inputDOM.id).to.equal(labelDOM.htmlFor);\r\n  });\r\n\r\n  it('should render a disabled input element', () => {\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField disabled={ true } />\r\n    );\r\n\r\n    // Assert the input box is disabled.\r\n    const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\r\n    expect(inputDOM.disabled).to.equal(true);\r\n  });\r\n\r\n  describe('error message', () => {\r\n    const errorMessage: string = 'The string is too long, should not exceed 3 characters.';\r\n\r\n    function assertErrorMessage(renderedDOM: HTMLElement, expectedErrorMessage: string | boolean): void {\r\n      const errorMessageDOM: HTMLElement =\r\n        renderedDOM.querySelector('[data-automation-id=error-message]') as HTMLElement;\r\n\r\n      if (expectedErrorMessage === false) {\r\n        expect(errorMessageDOM).to.be.null; // element not exists\r\n      } else {\r\n        expect(errorMessageDOM.textContent).to.equal(expectedErrorMessage);\r\n      }\r\n    }\r\n\r\n    it('should render error message when onGetErrorMessage returns a string', () => {\r\n      function validator(value: string): string {\r\n        return value.length > 3 ? errorMessage : '';\r\n      }\r\n\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          value='whatever value'\r\n          onGetErrorMessage={ validator }\r\n          />\r\n      );\r\n\r\n      const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\r\n      ReactTestUtils.Simulate.change(inputDOM, mockEvent('the input value'));\r\n\r\n      // The value is delayed to validate, so it must to query error message after a while.\r\n      return delay(250).then(() => assertErrorMessage(renderedDOM, errorMessage));\r\n    });\r\n\r\n    it('should render error message when onGetErrorMessage returns a Promise<string>', () => {\r\n      function validator(value: string): Promise<string> {\r\n        return Promise.resolve(value.length > 3 ? errorMessage : '');\r\n      }\r\n\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          value='whatever value'\r\n          onGetErrorMessage={ validator }\r\n          />\r\n      );\r\n\r\n      const inputDOM: HTMLInputElement = renderedDOM.getElementsByTagName('input')[0];\r\n      ReactTestUtils.Simulate.change(inputDOM, mockEvent('the input value'));\r\n\r\n      // The value is delayed to validate, so it must to query error message after a while.\r\n      return delay(250).then(() => assertErrorMessage(renderedDOM, errorMessage));\r\n    });\r\n\r\n    it('should render error message on first render when onGetErrorMessage returns a string', () => {\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          value='whatever value'\r\n          onGetErrorMessage={ () => errorMessage }\r\n          />\r\n      );\r\n\r\n      assertErrorMessage(renderedDOM, errorMessage);\r\n    });\r\n\r\n    it('should render error message on first render when onGetErrorMessage returns a Promise<string>', () => {\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          value='whatever value'\r\n          onGetErrorMessage={ () => Promise.resolve(errorMessage) }\r\n          />\r\n      );\r\n\r\n      // The Promise based validation need to assert with async pattern.\r\n      return delay(1).then(() => assertErrorMessage(renderedDOM, errorMessage));\r\n    });\r\n\r\n    it('should not render error message when onGetErrorMessage return an empty string', () => {\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          value='whatever value'\r\n          onGetErrorMessage={ () => '' }\r\n          />\r\n      );\r\n\r\n      assertErrorMessage(renderedDOM, /* exist */ false);\r\n    });\r\n\r\n    it('should not render error message when no value is provided', () => {\r\n      let actualValue: string = undefined;\r\n\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          label='text-field-label'\r\n          onGetErrorMessage={ (value: string) => actualValue = value }\r\n          />\r\n      );\r\n\r\n      assertErrorMessage(renderedDOM, /* exist */ false);\r\n      expect(actualValue).to.equal('');\r\n    });\r\n\r\n    it('should update error message when receive new value from props', () => {\r\n      function validator(value: string): string {\r\n        return value.length > 3 ? errorMessage : '';\r\n      }\r\n\r\n      const renderedDOM: HTMLElement = renderIntoDocument(\r\n        <TextField\r\n          value='initial value'\r\n          onGetErrorMessage={ validator }\r\n          />\r\n      );\r\n\r\n      assertErrorMessage(renderedDOM, errorMessage);\r\n\r\n      ReactDOM.render(\r\n        <TextField\r\n          value=''\r\n          onGetErrorMessage={ validator }\r\n          />,\r\n        renderedDOM.parentElement\r\n      );\r\n\r\n      return delay(250).then(() => assertErrorMessage(renderedDOM, /* exist */ false));\r\n    });\r\n  });\r\n\r\n  it('can render a default value', () => {\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField\r\n        defaultValue='initial value'\r\n        />\r\n    );\r\n\r\n    expect(renderedDOM.querySelector('input').value).equals('initial value');\r\n  });\r\n\r\n  it('can render a default value as a textarea', () => {\r\n    const renderedDOM: HTMLElement = renderIntoDocument(\r\n      <TextField\r\n        defaultValue='initial value'\r\n        multiline={ true }\r\n        />\r\n    );\r\n\r\n    expect(renderedDOM.querySelector('textarea').value).equals('initial value');\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}