{"version":3,"sources":["components/TextField/TextField.tsx"],"names":[],"mappings":"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","file":"components/TextField/TextField.js","sourcesContent":["import * as React from 'react';\r\nimport { ITextFieldProps } from './TextField.Props';\r\nimport { Label } from '../../Label';\r\nimport {\r\n  Async,\r\n  getId,\r\n  css,\r\n  getNativeProps,\r\n  inputProperties,\r\n  textAreaProperties\r\n} from '../../Utilities';\r\nimport './TextField.scss';\r\n\r\nexport interface ITextFieldState {\r\n  value?: string;\r\n\r\n  /** Is true when the control has focus. */\r\n  isFocused?: boolean;\r\n\r\n  /**\r\n   * The validation error message.\r\n   *\r\n   * - If there is no validation error or we have not validated the input value, errorMessage is an empty string.\r\n   * - If we have done the validation and there is validation error, errorMessage is the validation error message.\r\n   */\r\n  errorMessage?: string;\r\n}\r\n\r\nexport class TextField extends React.Component<ITextFieldProps, ITextFieldState> {\r\n  public static defaultProps: ITextFieldProps = {\r\n    multiline: false,\r\n    resizable: true,\r\n    underlined: false,\r\n    onChanged: () => { /* noop */ },\r\n    onBeforeChange: () => { /* noop */ },\r\n    onNotifyValidationResult: () => { /* noop */ },\r\n    onGetErrorMessage: () => undefined,\r\n    deferredValidationTime: 200,\r\n    errorMessage: ''\r\n  };\r\n\r\n  private _id: string;\r\n  private _descriptionId: string;\r\n  private _async: Async;\r\n  private _delayedValidate: (value: string) => void;\r\n  private _isMounted: boolean;\r\n  private _lastValidation: number;\r\n  private _latestValidateValue;\r\n  private _willMountTriggerValidation;\r\n  private _field;\r\n\r\n  public constructor(props: ITextFieldProps) {\r\n    super(props);\r\n\r\n    this._id = getId('TextField');\r\n    this._descriptionId = getId('TextFieldDescription');\r\n    this._async = new Async(this);\r\n\r\n    this.state = {\r\n      value: props.value || props.defaultValue || '',\r\n      isFocused: false,\r\n      errorMessage: ''\r\n    };\r\n\r\n    this._onInputChange = this._onInputChange.bind(this);\r\n    this._onFocus = this._onFocus.bind(this);\r\n    this._onBlur = this._onBlur.bind(this);\r\n\r\n    this._delayedValidate = this._async.debounce(this._validate, this.props.deferredValidationTime);\r\n    this._lastValidation = 0;\r\n    this._willMountTriggerValidation = false;\r\n  }\r\n\r\n  /**\r\n   * Gets the current value of the text field.\r\n   */\r\n  public get value(): string {\r\n    return this.state.value;\r\n  }\r\n\r\n  public componentWillMount() {\r\n    this._willMountTriggerValidation = true;\r\n    this._validate(this.state.value);\r\n  }\r\n\r\n  public componentDidMount() {\r\n    this._isMounted = true;\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps: ITextFieldProps) {\r\n    const { onBeforeChange } = this.props;\r\n\r\n    if (newProps.value !== undefined && newProps.value !== this.state.value) {\r\n      if (onBeforeChange) {\r\n        onBeforeChange(newProps.value);\r\n      }\r\n\r\n      this.setState({\r\n        value: newProps.value,\r\n        errorMessage: ''\r\n      } as ITextFieldState);\r\n\r\n      this._delayedValidate(newProps.value);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    this._async.dispose();\r\n    this._isMounted = false;\r\n  }\r\n\r\n  public render() {\r\n    let { disabled, required, multiline, underlined, label, description, iconClass, className } = this.props;\r\n    let { isFocused } = this.state;\r\n    const errorMessage: string = this._errorMessage;\r\n\r\n    const textFieldClassName = css('ms-TextField', className, {\r\n      'is-required': required,\r\n      'is-disabled': disabled,\r\n      'is-active': isFocused,\r\n      'ms-TextField--multiline': multiline,\r\n      'ms-TextField--underlined': underlined\r\n    });\r\n\r\n    return (\r\n      <div className={ textFieldClassName }>\r\n        { label && <Label htmlFor={ this._id }>{ label }</Label> }\r\n        { iconClass && <i className={ iconClass }></i> }\r\n        { multiline ? this._renderTextArea() : this._renderInput() }\r\n        { errorMessage && <div aria-live='assertive' className='ms-u-screenReaderOnly' data-automation-id='error-message'>{ errorMessage }</div> }\r\n        { (description || errorMessage) &&\r\n          <span id={ this._descriptionId }>\r\n            { description && <span className='ms-TextField-description'>{ description }</span> }\r\n            { errorMessage && <p className='ms-TextField-errorMessage ms-u-slideDownIn20'>{ errorMessage }</p> }\r\n          </span>\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sets focus on the text field\r\n   */\r\n  public focus() {\r\n    if (this._field) {\r\n      this._field.focus();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Selects the text field\r\n   */\r\n  public select() {\r\n    if (this._field) {\r\n      this._field.select();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection start of the text field to a specified value\r\n   */\r\n  public setSelectionStart(value: number) {\r\n    if (this._field) {\r\n      this._field.selectionStart = value;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets the selection end of the text field to a specified value\r\n   */\r\n  public setSelectionEnd(value: number) {\r\n    if (this._field) {\r\n      this._field.selectionEnd = value;\r\n    }\r\n  }\r\n\r\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onFocus) {\r\n      this.props.onFocus(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: true });\r\n  }\r\n\r\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement | HTMLTextAreaElement>) {\r\n    if (this.props.onBlur) {\r\n      this.props.onBlur(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: false });\r\n  }\r\n\r\n  private get _fieldClassName(): string {\r\n    const errorMessage: string = this._errorMessage;\r\n    let textFieldClassName: string;\r\n\r\n    if (this.props.multiline && !this.props.resizable) {\r\n      textFieldClassName = 'ms-TextField-field ms-TextField-field--unresizable';\r\n    } else {\r\n      textFieldClassName = 'ms-TextField-field';\r\n    }\r\n\r\n    return css(textFieldClassName, this.props.inputClassName, {\r\n      'ms-TextField-invalid': !!errorMessage\r\n    });\r\n  }\r\n\r\n  private get _errorMessage(): string {\r\n    let { errorMessage } = this.state;\r\n    if (!errorMessage) {\r\n      errorMessage = this.props.errorMessage;\r\n    }\r\n\r\n    return errorMessage;\r\n  }\r\n\r\n  private _renderTextArea(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    let textAreaProps = getNativeProps(this.props, textAreaProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <textarea\r\n        { ...textAreaProps }\r\n        id={ this._id }\r\n        ref={ (c): HTMLTextAreaElement => this._field = c }\r\n        value={ this.state.value }\r\n        onChange={ this._onInputChange }\r\n        className={ this._fieldClassName }\r\n        aria-label={ this.props.ariaLabel }\r\n        aria-describedby={ this._descriptionId }\r\n        aria-invalid={ !!this.state.errorMessage }\r\n        onFocus={ this._onFocus }\r\n        onBlur={ this._onBlur }\r\n        />\r\n    );\r\n  }\r\n\r\n  private _renderInput(): React.ReactElement<React.HTMLProps<HTMLInputElement>> {\r\n    let inputProps = getNativeProps<React.HTMLProps<HTMLInputElement>>(this.props, inputProperties, ['defaultValue']);\r\n\r\n    return (\r\n      <input\r\n        type={ 'text' }\r\n        { ...inputProps }\r\n        id={ this._id }\r\n        ref={ (c): HTMLInputElement => this._field = c }\r\n        value={ this.state.value }\r\n        onChange={ this._onInputChange }\r\n        className={ this._fieldClassName }\r\n        aria-label={ this.props.ariaLabel }\r\n        aria-describedby={ this._descriptionId }\r\n        aria-invalid={ !!this.state.errorMessage }\r\n        onFocus={ this._onFocus }\r\n        onBlur={ this._onBlur }\r\n        />\r\n    );\r\n  }\r\n\r\n  private _onInputChange(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>): void {\r\n    const element: HTMLInputElement = event.target as HTMLInputElement;\r\n    const value: string = element.value;\r\n\r\n    this.setState({\r\n      value: value,\r\n      errorMessage: ''\r\n    } as ITextFieldState);\r\n    this._willMountTriggerValidation = false;\r\n    this._delayedValidate(value);\r\n    const { onBeforeChange } = this.props;\r\n    onBeforeChange(value);\r\n  }\r\n\r\n  private _validate(value: string): void {\r\n    // In case of _validate called multi-times during executing validate logic with promise return.\r\n    if (this._latestValidateValue === value) {\r\n      return;\r\n    }\r\n\r\n    this._latestValidateValue = value;\r\n    let { onGetErrorMessage } = this.props;\r\n    let result: string | PromiseLike<string> = onGetErrorMessage(value || '');\r\n\r\n    if (result !== undefined) {\r\n      if (typeof result === 'string') {\r\n        this.setState({\r\n          errorMessage: result\r\n        } as ITextFieldState);\r\n        this._notifyAfterValidate(value, result);\r\n      } else {\r\n        let currentValidation: number = ++this._lastValidation;\r\n\r\n        result.then((errorMessage: string) => {\r\n          if (this._isMounted && currentValidation === this._lastValidation) {\r\n            this.setState({ errorMessage } as ITextFieldState);\r\n          }\r\n          this._notifyAfterValidate(value, errorMessage);\r\n        });\r\n      }\r\n    } else {\r\n      this._notifyAfterValidate(value, '');\r\n    }\r\n  }\r\n\r\n  private _notifyAfterValidate(value: string, errorMessage: string): void {\r\n    if (!this._willMountTriggerValidation && value === this.state.value) {\r\n      const { onNotifyValidationResult } = this.props;\r\n      onNotifyValidationResult(errorMessage, value);\r\n      if (!errorMessage) {\r\n        const { onChanged } = this.props;\r\n        onChanged(value);\r\n      }\r\n    } else {\r\n      this._willMountTriggerValidation = false;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}