{"version":3,"sources":["components/Link/Link.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;IAmBA;QAA0B,wBAA8B;QAAxD;YAA0B,8BAA8B;QAiDxD,CAAC;QA9CQ,qBAAM,GAAb;YACE,IAAA,eAAwD,EAAlD,sBAAQ,EAAE,sBAAQ,EAAE,wBAAS,EAAE,cAAI,CAAgB;YAEzD,MAAM,CAAC,CACL,IAAI,GAAG,CACL,qBAAC,CAAC,aACA,IAAI,EAAC,MAAM,GACN,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,GACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;gBACpC,aAAa,EAAE,QAAQ;aACxB,CAAG,EACJ,OAAO,EAAG,IAAI,CAAC,QAAU,EACzB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAG,EACjC,MAAM,EAAG,IAAI,CAAC,KAAK,CAAC,MAAQ,IAE1B,QAAU,CACV,CACL,GAAG,CACA,qBAAC,MAAM,aACL,IAAI,EAAC,QAAQ,GACR,0BAAc,CAAC,IAAI,CAAC,KAAK,EAAE,4BAAgB,CAAC,GACjD,SAAS,EAAG,eAAG,CAAC,SAAS,EAAE,SAAS,EAAE;gBACpC,aAAa,EAAE,QAAQ;aACxB,CAAG,EACJ,OAAO,EAAG,IAAI,CAAC,QAAU,EACzB,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,OAAO,CAAG,IAE/B,QAAU,CACL,CACV,CAAC,CAAC;QACT,CAAC;QAEM,oBAAK,GAAZ;YACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACf,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;YACrB,CAAC;QACH,CAAC;QAGO,uBAAQ,GAAhB,UAAiB,EAA2D;YACpE,gCAAO,CAAgB;YAE7B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;gBACZ,OAAO,CAAC,EAAE,CAAC,CAAC;YACd,CAAC;QACH,CAAC;QAPD;YAAC,oBAAQ;4CAAA;QAQX,WAAC;IAAD,CAjDA,AAiDC,CAjDyB,6BAAa,GAiDtC;IAjDY,YAAI,OAiDhB,CAAA","file":"components/Link/Link.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../common/BaseComponent';\r\nimport {\r\n  anchorProperties,\r\n  autobind,\r\n  buttonProperties,\r\n  css,\r\n  getNativeProps\r\n} from '../../Utilities';\r\nimport { ILink, ILinkProps } from './Link.Props';\r\nimport './Link.scss';\r\n\r\ninterface IMyScreen extends Screen {\r\n  left: number;\r\n  top: number;\r\n}\r\n\r\ndeclare var screen: IMyScreen;\r\n\r\nexport class Link extends BaseComponent<ILinkProps, any> implements ILink {\r\n  private _link: HTMLElement;\r\n\r\n  public render() {\r\n    let { disabled, children, className, href } = this.props;\r\n\r\n    return (\r\n      href ? (\r\n        <a\r\n          role='link'\r\n          { ...getNativeProps(this.props, anchorProperties) }\r\n          className={ css('ms-Link', className, {\r\n            'is-disabled': disabled\r\n          }) }\r\n          onClick={ this._onClick }\r\n          ref={ this._resolveRef('_link') }\r\n          target={ this.props.target }\r\n          >\r\n          { children }\r\n        </a>\r\n      ) : (\r\n          <button\r\n            role='button'\r\n            { ...getNativeProps(this.props, buttonProperties) }\r\n            className={ css('ms-Link', className, {\r\n              'is-disabled': disabled\r\n            }) }\r\n            onClick={ this._onClick }\r\n            ref={ this._resolveRef('_link') }\r\n            >\r\n            { children }\r\n          </button>\r\n        ));\r\n  }\r\n\r\n  public focus() {\r\n    if (this._link) {\r\n      this._link.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onClick(ev: React.MouseEvent<HTMLAnchorElement | HTMLButtonElement>) {\r\n    let { onClick } = this.props;\r\n\r\n    if (onClick) {\r\n      onClick(ev);\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}