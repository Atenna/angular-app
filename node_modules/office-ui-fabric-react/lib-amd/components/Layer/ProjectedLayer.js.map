{"version":3,"sources":["components/Layer/ProjectedLayer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;IA0BA;;;OAGG;IACH;QAAoC,kCAAyD;QAI3F,wBAAY,KAA4B;YACtC,kBAAM,KAAK,CAAC,CAAC;YAEb,IAAI,CAAC,KAAK,GAAG;gBACX,SAAS,EAAE,KAAK;aACjB,CAAC;YAEF,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC,kBAAkB,CAAC;QAC/C,CAAC;QAEM,8CAAqB,GAA5B;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC;QAC/B,CAAC;QAEM,0CAAiB,GAAxB;YACE,4BAAgB,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC;YAC9D,IAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;QACrC,CAAC;QAEM,+BAAM,GAAb;YACE,IAAI,WAAW,GAAG,0BAAc,CAAkC,IAAI,CAAC,YAAY,EAAE,yBAAa,CAAC,CAAC;YAEpG,iGAAiG;YACjG,mGAAmG;YACnG,yEAAyE;YAEzE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC;gBAC1B,OAAO,WAAW,CAAC,QAAQ,CAAC;YAC9B,CAAC;YAED,MAAM,CAAC,CACL,qBAAC,GAAG,gBACG,WAAW,GAChB,SAAS,EAAG,eAAG,CAAC,mBAAmB,EAAE,WAAW,CAAC,SAAS,CAAG,EAC7D,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,cAAc,CAAG,GACtC,CACL,CAAC;QACJ,CAAC;QAEM,8BAAK,GAAZ;YACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC;QAC5B,CAAC;QAEM,qCAAY,GAAnB,UAAoB,WAAgB;YAClC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;YAChC,IAAI,CAAC,WAAW,EAAE,CAAC;QACrB,CAAC;QACH,qBAAC;IAAD,CAnDA,AAmDC,CAnDmC,yBAAa,GAmDhD;IAnDY,sBAAc,iBAmD1B,CAAA","file":"components/Layer/ProjectedLayer.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  css,\r\n  divProperties,\r\n  getNativeProps,\r\n  setVirtualParent\r\n} from '../../Utilities';\r\nimport { ILayerProps } from './Layer.Props';\r\nimport './Layer.scss';\r\n\r\nexport interface IProjectedLayerProps extends React.Props<ProjectedLayer> {\r\n  /** Indicates a unique id for the layer, if applicable. */\r\n  layerId: string;\r\n\r\n  /** Virtual parent element. */\r\n  parentElement: HTMLElement;\r\n\r\n  /** Indicates the layer to redirect to. */\r\n  defaultRemoteProps: ILayerProps;\r\n}\r\n\r\nexport interface IProjectedLayerState {\r\n  isMounted: boolean;\r\n}\r\n\r\n/**\r\n * ProjectedLayer is an internal helper component that projects the contents rendered within a Layer. It is created\r\n * by the corresponding LayerHost that the originating Layer communicates with.\r\n */\r\nexport class ProjectedLayer extends BaseComponent<IProjectedLayerProps, IProjectedLayerState> {\r\n  private _rootElement: HTMLElement;\r\n  private _remoteProps: ILayerProps;\r\n\r\n  constructor(props?: IProjectedLayerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isMounted: false\r\n    };\r\n\r\n    this._remoteProps = props.defaultRemoteProps;\r\n  }\r\n\r\n  public shouldComponentUpdate() {\r\n    return !this.state.isMounted;\r\n  }\r\n\r\n  public componentDidMount() {\r\n    setVirtualParent(this._rootElement, this.props.parentElement);\r\n    this.setState({ isMounted: true });\r\n  }\r\n\r\n  public render() {\r\n    let remoteProps = getNativeProps<React.HTMLProps<HTMLDivElement>>(this._remoteProps, divProperties);\r\n\r\n    // If this is the first render, let's avoid rendering children until we're certain that we've set\r\n    // the virtual parent. After that, we can safely render the children, which in turn can safely call\r\n    // dom utilities like elementContains, which respects the virtual parent.\r\n\r\n    if (!this.state.isMounted) {\r\n      delete remoteProps.children;\r\n    }\r\n\r\n    return (\r\n      <div\r\n        { ...remoteProps }\r\n        className={ css('ms-ProjectedLayer', remoteProps.className) }\r\n        ref={ this._resolveRef('_rootElement') }\r\n        />\r\n    );\r\n  }\r\n\r\n  public getId() {\r\n    return this.props.layerId;\r\n  }\r\n\r\n  public projectProps(remoteProps: any) {\r\n    this._remoteProps = remoteProps;\r\n    this.forceUpdate();\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}