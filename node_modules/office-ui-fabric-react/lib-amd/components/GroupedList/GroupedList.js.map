{"version":3,"sources":["components/GroupedList/GroupedList.tsx"],"names":[],"mappings":"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","file":"components/GroupedList/GroupedList.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  IGroupedList,\r\n  IGroupedListProps,\r\n  IGroup\r\n} from './GroupedList.Props';\r\nimport {\r\n  GroupedListSection\r\n} from './GroupedListSection';\r\n\r\nimport { css } from '../../utilities/css';\r\nimport {\r\n  List\r\n} from '../../List';\r\nimport {\r\n  SelectionMode\r\n} from '../../utilities/selection/index';\r\nimport {\r\n  BaseComponent,\r\n  autobind,\r\n  assign\r\n} from '../../Utilities';\r\nimport './GroupedList.scss';\r\n\r\nexport interface IGroupedListState {\r\n  lastWidth?: number;\r\n  lastSelectionMode?: SelectionMode;\r\n  groups?: IGroup[];\r\n}\r\n\r\nexport class GroupedList extends BaseComponent<IGroupedListProps, IGroupedListState> implements IGroupedList {\r\n  public static defaultProps = {\r\n    selectionMode: SelectionMode.multiple,\r\n    isHeaderVisible: true,\r\n    groupProps: {}\r\n  };\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement,\r\n    list: List\r\n  };\r\n\r\n  private _isSomeGroupExpanded: boolean;\r\n\r\n  constructor(props: IGroupedListProps) {\r\n    super(props);\r\n\r\n    this._isSomeGroupExpanded = this._computeIsSomeGroupExpanded(props.groups);\r\n\r\n    this.state = {\r\n      lastWidth: 0,\r\n      groups: props.groups\r\n    };\r\n  }\r\n\r\n  public componentWillReceiveProps(newProps) {\r\n    let {\r\n      groups,\r\n      selectionMode\r\n    } = this.props;\r\n    let shouldForceUpdates = false;\r\n\r\n    if (newProps.groups !== groups) {\r\n      this.setState({ groups: newProps.groups });\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (newProps.selectionMode !== selectionMode) {\r\n      shouldForceUpdates = true;\r\n    }\r\n\r\n    if (shouldForceUpdates) {\r\n      this._forceListUpdates();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      className\r\n    } = this.props;\r\n    let {\r\n      groups\r\n    } = this.state;\r\n\r\n    return (\r\n      <div\r\n        ref='root'\r\n        className={ css('ms-GroupedList', className) }\r\n        data-automationid='GroupedList'\r\n        data-is-scrollable='false'\r\n        role='grid'\r\n        >\r\n        { !groups ?\r\n          this._renderGroup(null, 0) : (\r\n            <List\r\n              ref='list'\r\n              items={ groups }\r\n              onRenderCell={ this._renderGroup }\r\n              getItemCountForPage={ () => 1 }\r\n              />\r\n          )\r\n        }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public forceUpdate() {\r\n    super.forceUpdate();\r\n    this._forceListUpdates();\r\n  }\r\n\r\n  public toggleCollapseAll(allCollapsed: boolean) {\r\n    let { groups } = this.state;\r\n    let { groupProps } = this.props;\r\n    let onToggleCollapseAll = groupProps && groupProps.onToggleCollapseAll;\r\n\r\n    if (groups) {\r\n      if (onToggleCollapseAll) {\r\n        onToggleCollapseAll(allCollapsed);\r\n      }\r\n\r\n      for (let groupIndex = 0; groupIndex < groups.length; groupIndex++) {\r\n        groups[groupIndex].isCollapsed = allCollapsed;\r\n      }\r\n\r\n      this._updateIsSomeGroupExpanded();\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _renderGroup(group, groupIndex) {\r\n    let {\r\n      dragDropEvents,\r\n      dragDropHelper,\r\n      eventsToRegister,\r\n      groupProps,\r\n      items,\r\n      listProps,\r\n      onRenderCell,\r\n      selectionMode,\r\n      selection,\r\n      viewport\r\n    } = this.props;\r\n\r\n    // override group header/footer props as needed\r\n    let dividerProps = {\r\n      onToggleSelectGroup: this._onToggleSelectGroup,\r\n      onToggleCollapse: this._onToggleCollapse,\r\n      onToggleSummarize: this._onToggleSummarize\r\n    };\r\n\r\n    let headerProps = assign({}, groupProps.headerProps, dividerProps);\r\n    let footerProps = assign({}, groupProps.footerProps, dividerProps);\r\n    let groupNestingDepth = this._getGroupNestingDepth();\r\n\r\n    return (!group || group.count > 0) ? (\r\n      <GroupedListSection\r\n        ref={ 'group_' + groupIndex }\r\n        key={ this._getGroupKey(group) }\r\n        dragDropEvents={ dragDropEvents }\r\n        dragDropHelper={ dragDropHelper }\r\n        eventsToRegister={ eventsToRegister }\r\n        footerProps={ footerProps }\r\n        getGroupItemLimit={ groupProps && groupProps.getGroupItemLimit }\r\n        group={ group }\r\n        groupIndex={ groupIndex }\r\n        groupNestingDepth={ groupNestingDepth }\r\n        headerProps={ headerProps }\r\n        listProps={ listProps }\r\n        items={ items }\r\n        onRenderCell={ onRenderCell }\r\n        onRenderGroupHeader={ groupProps.onRenderHeader }\r\n        onRenderGroupFooter={ groupProps.onRenderFooter }\r\n        selectionMode={ selectionMode }\r\n        selection={ selection }\r\n        viewport={ viewport }\r\n        />\r\n      ) : null;\r\n  }\r\n\r\n  @autobind\r\n  private _getGroupKey(group: IGroup): string {\r\n    return 'group-' + (group ?\r\n      group.key + '-' + group.count :\r\n      '');\r\n  }\r\n\r\n  private _getGroupNestingDepth(): number {\r\n    let { groups } = this.state;\r\n    let level = 0;\r\n    let groupsInLevel = groups;\r\n\r\n    while (groupsInLevel && groupsInLevel.length > 0) {\r\n      level++;\r\n      groupsInLevel = groupsInLevel[0].children;\r\n    }\r\n\r\n    return level;\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleCollapse(group: IGroup) {\r\n    let { groupProps } = this.props;\r\n    let onToggleCollapse = groupProps && groupProps.headerProps && groupProps.headerProps.onToggleCollapse;\r\n\r\n    if (group) {\r\n      if (onToggleCollapse) {\r\n        onToggleCollapse(group);\r\n      }\r\n\r\n      group.isCollapsed = !group.isCollapsed;\r\n      this._updateIsSomeGroupExpanded();\r\n      this.setState({ }, this.forceUpdate);\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleSelectGroup(group: IGroup) {\r\n    if (group) {\r\n      this.props.selection.toggleRangeSelected(group.startIndex, group.count);\r\n    }\r\n  }\r\n\r\n  private _forceListUpdates(groups?: IGroup[]) {\r\n    groups = groups || this.state.groups;\r\n\r\n    let groupCount = groups ? groups.length : 1;\r\n\r\n    if (this.refs.list) {\r\n      this.refs.list.forceUpdate();\r\n\r\n      for (let i = 0; i < groupCount; i++) {\r\n        let group = this.refs.list.refs['group_' + String(i)] as GroupedListSection;\r\n        if (group) {\r\n          group.forceListUpdate();\r\n        }\r\n      }\r\n    } else {\r\n      let group = this.refs['group_' + String(0)] as GroupedListSection;\r\n      if (group) {\r\n        group.forceListUpdate();\r\n      }\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onToggleSummarize(group: IGroup) {\r\n    let { groupProps } = this.props;\r\n    let onToggleSummarize = groupProps && groupProps.footerProps && groupProps.footerProps.onToggleSummarize;\r\n\r\n    if (onToggleSummarize) {\r\n      onToggleSummarize(group);\r\n    } else {\r\n      if (group) {\r\n        group.isShowingAll = !group.isShowingAll;\r\n      }\r\n\r\n      this.forceUpdate();\r\n    }\r\n  }\r\n\r\n  private _computeIsSomeGroupExpanded(groups: IGroup[]) {\r\n    return groups && groups.some(group => group.children ? this._computeIsSomeGroupExpanded(group.children) : !group.isCollapsed);\r\n  }\r\n\r\n  private _updateIsSomeGroupExpanded() {\r\n    let { groups } = this.state;\r\n    let { onGroupExpandStateChanged } = this.props;\r\n\r\n    let newIsSomeGroupExpanded = this._computeIsSomeGroupExpanded(groups);\r\n    if (this._isSomeGroupExpanded !== newIsSomeGroupExpanded) {\r\n      if (onGroupExpandStateChanged) {\r\n        onGroupExpandStateChanged(newIsSomeGroupExpanded);\r\n      }\r\n      this._isSomeGroupExpanded = newIsSomeGroupExpanded;\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}