{"version":3,"sources":["utilities/Rectangle.test.ts"],"names":[],"mappings":";;IAEA,4BAAmC,YAAuB,EAAE,YAAuB;QACjF,+HAA+H;QAC/H,kCAAkC;QACltX,CAAC;IAJe,0BAAkB,qBAIjC,CAAA","file":"utilities/Rectangle.test.js","sourcesContent":["import Rectangle from './Rectangle';\r\n\r\nexport function areRectanglesEqual(rectangleOne: Rectangle, rectangleTwo: Rectangle) {\r\n  // I'm fixing it to 4 decimal places because it allows enough precision and will handle cases when something should be rounded,\r\n  // like .999999 should round to 1.\r\n  return (parseFloat(rectangleOne.top.toFixed(4)) === parseFloat(rectangleTwo.top.toFixed(4))  && parseFloat(rectangleOne.bottom.toFixed(4))  === parseFloat(rectangleTwo.bottom.toFixed(4)) && parseFloat(rectangleOne.left.toFixed(4))  === parseFloat(rectangleTwo.left.toFixed(4))  && parseFloat(rectangleOne.right.toFixed(4))  === parseFloat(rectangleTwo.right.toFixed(4)) );\r\n}"],"sourceRoot":"..\\..\\src"}