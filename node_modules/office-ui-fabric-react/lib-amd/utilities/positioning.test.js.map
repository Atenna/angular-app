{"version":3,"sources":["utilities/positioning.test.ts"],"names":[],"mappings":"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","file":"utilities/positioning.test.js","sourcesContent":["import Rectangle from './Rectangle';\r\nimport {positioningFunctions, RectangleEdge} from './positioning';\r\nimport { DirectionalHint } from '../common/DirectionalHint';\r\nimport {areRectanglesEqual} from './Rectangle.test';\r\ninterface ITestValidation {\r\n  callout: Rectangle;\r\n  beak: Rectangle;\r\n}\r\n\r\ninterface ITestValues {\r\n  callout: Rectangle;\r\n  target: Rectangle;\r\n  bounds: Rectangle;\r\n  beakWidth: number;\r\n}\r\n\r\nlet { assert } = chai;\r\n\r\nfunction stringifyResults(expected: any, actual: any) {\r\n  return 'expected was: ' + JSON.stringify(expected) + ' actual was: ' + JSON.stringify(actual);\r\n}\r\n\r\nfunction positionCalloutTest(testValues: ITestValues, alignment: DirectionalHint, validate: ITestValidation) {\r\n  let {callout, target, bounds, beakWidth} = testValues;\r\n  let gap: number = positioningFunctions._calculateActualBeakWidthInPixels(beakWidth) / 2;\r\n  let result: positioningFunctions.ICallout = positioningFunctions._positionCalloutWithinBounds(callout, target, bounds, positioningFunctions._getPositionData(alignment, target, bounds), gap);\r\n\r\n  let beak: Rectangle = positioningFunctions._positionBeak(beakWidth, result, target, 0);\r\n\r\n  assert(areRectanglesEqual(result.calloutRectangle, validate.callout), 'Callout not alligned with target ' + stringifyResults(validate.callout, result.calloutRectangle));\r\n\r\n  assert(areRectanglesEqual(beak, validate.beak), 'Beak is improperly positioned. ' + stringifyResults(validate.beak, beak));\r\n}\r\n\r\nfunction validateNoBeakTest(testValues: ITestValues, alignment: DirectionalHint, validate: ITestValidation) {\r\n  let {callout, target, bounds, beakWidth} = testValues;\r\n  let result: positioningFunctions.ICallout = positioningFunctions._positionCalloutWithinBounds(callout, target, bounds, positioningFunctions._getPositionData(alignment, target, bounds), beakWidth);\r\n\r\n  assert(areRectanglesEqual(result.calloutRectangle, validate.callout), 'No Beak: Callout not alligned with target ' + stringifyResults(validate.callout, result.calloutRectangle));\r\n}\r\n\r\ndescribe('Callout Positioning', () => {\r\n\r\n  it('Gets correct percent along line', () => {\r\n\r\n    let result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 100, y: 0}, 50);\r\n    assert(result.x === 50 && result.y === 0, 'point is not 50% from edge ' + stringifyResults(50, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 100, y: 0}, 75);\r\n    assert(result.x === 75 && result.y === 0, 'point is not 75% from edge ' + stringifyResults(75, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 0, y: 100}, 99);\r\n    assert(result.x === 0 && result.y === 99, 'point is not 99% from edge ' + stringifyResults(99, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 3, y: 0}, 50);\r\n    assert(result.x === 1.5 && result.y === 0, 'point is not 50% from edge ' + stringifyResults(1.5, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 3, y: 0}, 75);\r\n    assert(result.x === 2.25 && result.y === 0, 'point is not 75% from edge ' + stringifyResults(2.25, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 4, y: 0}, 50);\r\n    assert(result.x === 2 && result.y === 0, 'point is not 50% from edge ' + stringifyResults(2, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 4, y: 0}, 75);\r\n    assert(result.x === 3 && result.y === 0, 'point is not 75% from edge ' + stringifyResults(3, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 4, y: 0}, 60);\r\n    assert(result.x === 2.4 && result.y === 0, 'point is not 60% from edge ' + stringifyResults(2.4, result.x));\r\n\r\n    result = positioningFunctions._calculatePointPercentAlongLine({x: 0, y: 0}, {x: 5, y: 0}, 99);\r\n    assert(result.x === 4.95 && result.y === 0, 'point is not 99% from edge ' + stringifyResults(4.95, result.x));\r\n  });\r\n\r\n  it('Correctly recalculates percents', () => {\r\n    let targetRectangle = new Rectangle (200, 300, 200, 300);\r\n\r\n    let result = positioningFunctions._recalculateMatchingPercents(new Rectangle (0, 100, 300, 400), RectangleEdge.top, targetRectangle, RectangleEdge.bottom, 50);\r\n    assert(result === 100, stringifyResults(100, result));\r\n\r\n    result = positioningFunctions._recalculateMatchingPercents(new Rectangle (200, 300, 300, 400), RectangleEdge.top, targetRectangle, RectangleEdge.bottom, 50);\r\n    assert(result === 50, stringifyResults(50, result));\r\n\r\n    result = positioningFunctions._recalculateMatchingPercents(new Rectangle (200, 250, 300, 400), RectangleEdge.top, targetRectangle, RectangleEdge.bottom, 25);\r\n    assert(result === 50, stringifyResults(50, result));\r\n\r\n    result = positioningFunctions._recalculateMatchingPercents(new Rectangle (600, 900, 300, 400), RectangleEdge.top, targetRectangle, RectangleEdge.bottom, 50);\r\n    assert(result === 0, stringifyResults(0, result));\r\n  });\r\n\r\n  it('Correctly positions the callout without beak', () => {\r\n\r\n    let noBeakTestCase: ITestValues = {\r\n    callout: new Rectangle(0, 300, 0, 300),\r\n    target: new Rectangle(400, 800, 400, 800),\r\n    bounds: new Rectangle(0, 1600, 0, 1600),\r\n    beakWidth: 0,\r\n  };\r\n\r\n    let validateNoBeakBottomLeft: ITestValidation = {\r\n      callout: new Rectangle(400, 700, 800, 1100),\r\n      beak: null\r\n    };\r\n\r\n    let validateNoBeakLeft: ITestValidation = {\r\n          callout: new Rectangle(100, 400, 400, 700),\r\n          beak: null\r\n    };\r\n\r\n    let validateNoBeakTop: ITestValidation = {\r\n          callout: new Rectangle(400, 700, 100, 400),\r\n          beak: null\r\n    };\r\n\r\n    validateNoBeakTest(noBeakTestCase, DirectionalHint.bottomLeftEdge, validateNoBeakBottomLeft);\r\n\r\n    validateNoBeakTest(noBeakTestCase, DirectionalHint.leftTopEdge, validateNoBeakLeft);\r\n\r\n    validateNoBeakTest(noBeakTestCase, DirectionalHint.topLeftEdge, validateNoBeakTop);\r\n  });\r\n\r\n  it('Correctly positions the callout with the beak', () => {\r\n\r\n    let basicTestCase: ITestValues = {\r\n        callout: new Rectangle(0, 300, 0, 300),\r\n        target: new Rectangle(400, 800, 400, 800),\r\n        bounds: new Rectangle(0, 1600, 0, 1600),\r\n        beakWidth: 16,\r\n      };\r\n\r\n    let validateBottomLeft: ITestValidation = {\r\n        callout: new Rectangle(400, 700, 800 + positioningFunctions._calculateActualBeakWidthInPixels(8), 1100 + positioningFunctions._calculateActualBeakWidthInPixels(8)),\r\n        beak: new Rectangle(192, 208, -8, 8)\r\n      };\r\n\r\n    let validateBottomCenter: ITestValidation = {\r\n        callout: new Rectangle(450, 750, 800 + positioningFunctions._calculateActualBeakWidthInPixels(8), 1100 + positioningFunctions._calculateActualBeakWidthInPixels(8)),\r\n        beak: new Rectangle(142, 158, -8, 8)\r\n      };\r\n\r\n    let validateBottomRight: ITestValidation = {\r\n        callout: new Rectangle(500, 800, 800 + positioningFunctions._calculateActualBeakWidthInPixels(8), 1100 + positioningFunctions._calculateActualBeakWidthInPixels(8)),\r\n        beak: new Rectangle(92, 108, -8, 8)\r\n      };\r\n\r\n    positionCalloutTest(basicTestCase, DirectionalHint.bottomLeftEdge, validateBottomLeft);\r\n\r\n    positionCalloutTest(basicTestCase, DirectionalHint.bottomCenter, validateBottomCenter);\r\n\r\n    positionCalloutTest(basicTestCase, DirectionalHint.bottomRightEdge, validateBottomRight);\r\n  });\r\n\r\n});"],"sourceRoot":"..\\..\\src"}