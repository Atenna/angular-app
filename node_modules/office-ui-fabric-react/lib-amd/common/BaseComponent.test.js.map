{"version":3,"sources":["common/BaseComponent.test.tsx"],"names":[],"mappings":";;;;;;;IAOM,wBAAM,EAAE,oBAAM,CAAU;IAE9B,IAAI,gBAAgB,GAAG,6BAAa,CAAC,OAAO,CAAC;IAE7C;QAA4B,iCAAqB;QAAjD;YAA4B,8BAAqB;QAyCjD,CAAC;QAvCQ,0CAAkB,GAAzB;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,yCAAiB,GAAxB;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,6CAAqB,GAA5B;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,2CAAmB,GAA1B;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,iDAAyB,GAAhC;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,8BAAM,GAAb;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAEM,0CAAkB,GAAzB;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEM,4CAAoB,GAA3B;YACE,IAAI,CAAC,cAAc,EAAE,CAAC;QACxB,CAAC;QAEO,sCAAc,GAAtB;YACE,IAAI,GAAG,GAAe,IAAI,CAAC;YAE3B,iBAAiB;YACjB,GAAG,EAAE,CAAC;QACR,CAAC;QACH,oBAAC;IAAD,CAzCA,AAyCC,CAzC2B,6BAAa,GAyCxC;IAED,QAAQ,CAAC,eAAe,EAAE;QACxB,SAAS,CAAC;YACR,6BAAa,CAAC,OAAO,GAAG,gBAAgB,CAAC;QAC3C,CAAC,CAAC,CAAC;QAEH,aAAa,CAAC,oBAAoB,CAAC,CAAC;QACpC,aAAa,CAAC,mBAAmB,CAAC,CAAC;QACnC,aAAa,CAAC,uBAAuB,CAAC,CAAC;QACvC,aAAa,CAAC,qBAAqB,CAAC,CAAC;QACrC,aAAa,CAAC,2BAA2B,CAAC,CAAC;QAC3C,aAAa,CAAC,QAAQ,CAAC,CAAC;QACxB,aAAa,CAAC,oBAAoB,CAAC,CAAC;QACpC,aAAa,CAAC,sBAAsB,CAAC,CAAC;QAEtC,EAAE,CAAC,kBAAkB,EAAE;YACrB;gBAAkB,uBAAqB;gBAAvC;oBAAkB,8BAAqB;gBAMvC,CAAC;gBAHQ,oBAAM,GAAb;oBACE,MAAM,CAAC,qBAAC,GAAG,IAAC,GAAG,EAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAG,EAAG,CAAC;gBAClD,CAAC;gBACH,UAAC;YAAD,CANA,AAMC,CANiB,6BAAa,GAM9B;YAED,IAAI,SAAS,GAAG,cAAc,CAAC,kBAAkB,CAC/C,oBAAC,GAAG,OAAG,CACD,CAAC;YAET,MAAM,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC;QAClC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,uBAAuB,UAAU;QAC/B,EAAE,CAAC,+BAA6B,UAAU,eAAY,EAAE;YACtD,IAAI,gBAAgB,GAAG,IAAI,CAAC;YAE5B,6BAAa,CAAC,OAAO,GAAG,UAAC,YAAY,EAAE,EAAE,IAAK,OAAA,gBAAgB,GAAG,YAAY,EAA/B,CAA+B,CAAC;YAE9E,IAAI,CAAC,GAAG,IAAI,aAAa,EAAE,CAAC;YAE5B,CAAC,CAAC,UAAU,CAAC,EAAE,CAAC;YAEhB,MAAM,CAAC,gBAAgB,KAAK,IAAI,EAAE,2BAA2B,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC","file":"common/BaseComponent.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\nimport { BaseComponent } from './BaseComponent';\r\n\r\nlet { assert, expect } = chai;\r\n\r\nlet _originalOnError = BaseComponent.onError;\r\n\r\nclass TestComponent extends BaseComponent<{}, {}> {\r\n\r\n  public componentWillMount(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public componentDidMount(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public shouldComponentUpdate(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public componentWillUpdate(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public componentWillReceiveProps(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    this._createNullRef();\r\n    return null;\r\n  }\r\n\r\n  public componentDidUpdate(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  public componentWillUnmount(): void {\r\n    this._createNullRef();\r\n  }\r\n\r\n  private _createNullRef() {\r\n    let foo: () => void = null;\r\n\r\n    // Calling a null\r\n    foo();\r\n  }\r\n}\r\n\r\ndescribe('BaseComponent', () => {\r\n  afterEach(() => {\r\n    BaseComponent.onError = _originalOnError;\r\n  });\r\n\r\n  _buildTestFor('componentWillMount');\r\n  _buildTestFor('componentDidMount');\r\n  _buildTestFor('shouldComponentUpdate');\r\n  _buildTestFor('componentWillUpdate');\r\n  _buildTestFor('componentWillReceiveProps');\r\n  _buildTestFor('render');\r\n  _buildTestFor('componentDidUpdate');\r\n  _buildTestFor('componentWillUnmount');\r\n\r\n  it('can resolve refs', () => {\r\n    class Foo extends BaseComponent<{}, {}> {\r\n      public root: HTMLElement;\r\n\r\n      public render() {\r\n        return <div ref={ this._resolveRef('root') } />;\r\n      }\r\n    }\r\n\r\n    let component = ReactTestUtils.renderIntoDocument(\r\n      <Foo />\r\n    ) as any;\r\n\r\n    expect(component.root).to.exist;\r\n  });\r\n});\r\n\r\nfunction _buildTestFor(methodName) {\r\n  it(`calls the error logger on ${methodName} exception`, () => {\r\n    let lastErrorMessage = null;\r\n\r\n    BaseComponent.onError = (errorMessage, ex) => lastErrorMessage = errorMessage;\r\n\r\n    let c = new TestComponent();\r\n\r\n    c[methodName]();\r\n\r\n    assert(lastErrorMessage !== null, 'Error callback not called');\r\n  });\r\n}"],"sourceRoot":"..\\..\\src"}