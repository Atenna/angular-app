{"version":3,"sources":["common/connect.test.tsx"],"names":[],"mappings":"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","file":"common/connect.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\nimport * as ReactDOM from 'react-dom';\r\n\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\nimport { connect } from './connect';\r\nimport { BaseStore } from './BaseStore';\r\nimport { StoreHost } from './StoreHost';\r\nimport { StoreSet } from './StoreSet';\r\nimport { storeKey } from './storeKey';\r\nimport { ISubscribable } from './ISubscribable';\r\n\r\nlet { expect } = chai;\r\n\r\ninterface ITestComponentProps extends React.HTMLProps<HTMLDivElement> { }\r\n\r\n// Dumb component.\r\nconst TestComponent = (props: ITestComponentProps) => (\r\n  <div { ...props } />\r\n);\r\n\r\n// Dumb store.\r\ninterface IHelloStore extends ISubscribable {\r\n  message: string;\r\n\r\n  say(message: string): void;\r\n}\r\n\r\ninterface IAddStore extends ISubscribable {\r\n  result: number;\r\n\r\n  add(num1: number, num2: number): void;\r\n}\r\n\r\nclass AddStore extends BaseStore implements ISubscribable {\r\n\r\n}\r\n\r\nclass HelloStore extends BaseStore implements IHelloStore {\r\n  public message: string = '';\r\n\r\n  public say(message) {\r\n    this.message = message;\r\n    this.emitChange();\r\n  }\r\n}\r\n\r\ndescribe('connect', () => {\r\n  it('can observe store changes', (done) => {\r\n    let hello1 = storeKey<IHelloStore>('hello1');\r\n    let hello2 = storeKey<IHelloStore>('hello2');\r\n    let localStores = new StoreSet()\r\n      .add(hello1, new HelloStore())\r\n      .add(hello2, new HelloStore());\r\n\r\n    let Connected = connect<ITestComponentProps, {}>(\r\n      TestComponent,\r\n      [hello1, hello2],\r\n      (props: ITestComponentProps, hello1Store: IHelloStore, hello2Store: IHelloStore) => ({\r\n        children: hello1Store.message + hello2Store.message\r\n      })\r\n    );\r\n    let root = ReactTestUtils.renderIntoDocument(\r\n      <div>\r\n        <StoreHost stores={ localStores }>\r\n          <Connected />\r\n        </StoreHost>\r\n      </div>\r\n    );\r\n    let rootElement = ReactDOM.findDOMNode(root as React.ReactInstance);\r\n\r\n    expect(rootElement.textContent).equals('');\r\n\r\n    localStores.getStore(hello1).say('hello');\r\n    setTimeout(() => {\r\n      try {\r\n        expect(rootElement.textContent).equals('hello');\r\n        localStores.getStore(hello2).say(' world');\r\n\r\n        setTimeout(() => {\r\n          try {\r\n            expect(rootElement.textContent).equals('hello world');\r\n            done();\r\n          } catch (e) { done(e); }\r\n        }, 10);\r\n\r\n      } catch (e) { done(e); }\r\n    }, 10);\r\n\r\n  });\r\n\r\n  it('can throw when requiring a store in an environment without any stores hosted', () => {\r\n    let hello = storeKey<IHelloStore>('hello');\r\n    let Connected = connect(\r\n      TestComponent,\r\n      [hello],\r\n      () => { /* empty */ }\r\n    );\r\n    let threwException = false;\r\n\r\n    try {\r\n      ReactTestUtils.renderIntoDocument(\r\n        <div>\r\n          <Connected />\r\n        </div>\r\n      );\r\n    } catch (e) { threwException = true; }\r\n\r\n    expect(threwException).to.be.true;\r\n  });\r\n\r\n  it('can throw in an environment that does not contain the required store', () => {\r\n    let hello = storeKey<IHelloStore>('hello');\r\n    let Connected = connect(\r\n      TestComponent,\r\n      [hello],\r\n      () => { /* empty */ }\r\n    );\r\n    let threwException = false;\r\n\r\n    try {\r\n      ReactTestUtils.renderIntoDocument(\r\n        <StoreHost stores={ new StoreSet() }>\r\n          <div>\r\n            <Connected />\r\n          </div>\r\n        </StoreHost>\r\n      );\r\n    } catch (e) { threwException = true; }\r\n\r\n    expect(threwException).to.be.true;\r\n  });\r\n\r\n  it('renders a connected component 1 time when multiple stores fire changes', (done) => {\r\n    let resolves = 0;\r\n    let renders = 0;\r\n\r\n    const Dumb = () => {\r\n      renders++;\r\n      return <div>hi</div>;\r\n    };\r\n\r\n    let hello1 = storeKey<IHelloStore>('hello1');\r\n    let hello2 = storeKey<IHelloStore>('hello2');\r\n    let localStores = new StoreSet()\r\n      .add(hello1, new HelloStore())\r\n      .add(hello2, new HelloStore());\r\n    let Connected = connect(\r\n      Dumb,\r\n      [hello1, hello2],\r\n      () => {\r\n        resolves++;\r\n        return {};\r\n      });\r\n\r\n    ReactTestUtils.renderIntoDocument(\r\n      <div>\r\n        <StoreHost stores={ localStores }>\r\n          <Connected />\r\n        </StoreHost>\r\n      </div>\r\n    );\r\n\r\n    expect(resolves).to.equal(1, 'resolve was not 1');\r\n    expect(renders).to.equal(1, 'render was not 1');\r\n\r\n    // Cause 2 store changes. This should setImmediate and cause 1 resolve.\r\n    localStores.getStore(hello1).say('hello');\r\n    localStores.getStore(hello2).say(' world');\r\n\r\n    setTimeout(() => {\r\n      try {\r\n        expect(resolves).to.equal(2, 'resolve was not 2');\r\n        expect(renders).to.equal(1, 'render was not 1');\r\n        done();\r\n      } catch (e) { done(e); }\r\n    }, 10);\r\n  });\r\n});\r\n"],"sourceRoot":"..\\..\\src"}