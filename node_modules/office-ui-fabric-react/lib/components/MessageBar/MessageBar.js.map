{"version":3,"sources":["components/MessageBar/MessageBar.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,uBAAmC,cAAc,CAAC,CAAA;AAClD,QAAO,mBAAmB,CAAC,CAAA;AAC3B,oBAAoB,qBAAqB,CAAC,CAAA;AAC1C,iCAAiD,oBAAoB,CAAC,CAAA;AACtE,uBAAsB,wBAAwB,CAAC,CAAA;AAM/C;IAAgC,8BAAmD;IAkBjF,oBAAY,KAAuB;QACjC,kBAAM,KAAK,CAAC,CAAC;QAXP,aAAQ,GAAG;YACjB,GAAC,iCAAc,CAAC,IAAI,CAAC,GAAE,MAAM;YAC7B,GAAC,iCAAc,CAAC,OAAO,CAAC,GAAE,MAAM;YAChC,GAAC,iCAAc,CAAC,KAAK,CAAC,GAAE,YAAY;YACpC,GAAC,iCAAc,CAAC,OAAO,CAAC,GAAE,SAAS;YACnC,GAAC,iCAAc,CAAC,MAAM,CAAC,GAAE,SAAS;YAClC,GAAC,iCAAc,CAAC,aAAa,CAAC,GAAE,SAAS;YACzC,GAAC,iCAAc,CAAC,OAAO,CAAC,GAAE,WAAW;;SACtC,CAAC;QAKA,IAAI,CAAC,KAAK,GAAG;YACX,OAAO,EAAE,cAAK,CAAC,YAAY,CAAC;SAC7B,CAAC;;IACJ,CAAC;IAEM,2BAAM,GAAb;QACQ,wCAAW,CAAgB;QAEjC,MAAM,CAAC,WAAW,GAAG,IAAI,CAAC,gBAAgB,EAAE,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;IAC1E,CAAC;IAEO,mCAAc,GAAtB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YACvB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,WAAW;gBAC3B,qBAAC,GAAG,IAAC,SAAS,EAAC,uBAAuB;oBAAE,GAAA;oBAAE,IAAI,CAAC,KAAK,CAAC,OAAS;oBAAC,GAAA,CAAM;gBACrE,qBAAC,GAAG,IAAC,SAAS,EAAC,8BAA8B;oBACzC,IAAI,CAAC,cAAc,EAAI;oBACvB,IAAI,CAAC,KAAK,CAAC,OAAS,CAClB,CAAC;QACX,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,kCAAa,GAArB;QACE,MAAM,CAAC,SAAG,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,eAAe,EAAE;YAChD,eAAe,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,IAAI;YAClE,sBAAsB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,KAAK;YAC1E,wBAAwB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,MAAM,CAAC;YACzI,8BAA8B,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,aAAa;YAC1F,wBAAwB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,OAAO;YAC9E,wBAAwB,EAAE,IAAI,CAAC,KAAK,CAAC,cAAc,KAAK,iCAAc,CAAC,OAAO;SAC/E,CAAC,CAAC;IACL,CAAC;IAEO,mCAAc,GAAtB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,CAAC,CAAC;YACjC,MAAM,CAAC,oBAAC,eAAM,GACZ,QAAQ,EAAG,KAAO,EAClB,SAAS,EAAC,yBAAyB,EACnC,UAAU,EAAG,mBAAU,CAAC,IAAM,EAC9B,OAAO,EAAG,IAAI,CAAC,KAAK,CAAC,SAAW,EAChC,IAAI,EAAC,QAAQ,EACb,SAAS,EAAG,IAAI,CAAC,KAAK,CAAC,sBAAwB,EAC7C,CAAC;QACP,CAAC;QACD,MAAM,CAAC,IAAI,CAAC;IACd,CAAC;IAEO,iCAAY,GAApB;QACE,MAAM,CAAC,qBAAC,GAAG,IAAC,SAAS,EAAC,oBAAoB;YAAC,qBAAC,CAAC,IAAC,SAAS,EAAG,sBAAoB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAK,EAAK;SAAM,CAAC;IACxI,CAAC;IAEO,2CAAsB,GAA9B;QACE,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,CAAC,OAAO,GAAG,gCAAgC,GAAG,yBAAyB,CAAC;IACnH,CAAC;IAEO,qCAAgB,GAAxB;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,IAAI,CAAC,aAAa,EAAE,GAAG,0BAA4B,EAAC,IAAI,EAAC,QAAQ,GAAC,SAAS,GAAC,QAAQ,GAAC,aAAa,GAAC,oBAAoB;YACtI,qBAAC,GAAG,IAAC,SAAS,EAAC,uBAAuB;gBAClC,IAAI,CAAC,YAAY,EAAI;gBACvB,qBAAC,GAAG,IAAC,SAAS,EAAC,2BAA2B;oBACtC,IAAI,CAAC,cAAc,EAAI;oBACzB,qBAAC,GAAG,IAAC,SAAS,EAAC,oBAAoB,EAAC,EAAE,EAAG,IAAI,CAAC,KAAK,CAAC,OAAS;wBAC3D,qBAAC,IAAI,IAAC,SAAS,EAAG,IAAI,CAAC,sBAAsB,EAAI,GAC7C,IAAI,CAAC,KAAK,CAAC,QAAU,CAClB;qBACH;oBACJ,IAAI,CAAC,cAAc,EAAI,CACrB,CACF;SACF,CACP,CAAC;IACJ,CAAC;IAEO,sCAAiB,GAAzB;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,IAAI,CAAC,aAAa,EAAE,GAAG,2BAA6B,EAAC,IAAI,EAAC,QAAQ,GAAC,SAAS,GAAC,QAAQ,GAAC,aAAa,GAAC,oBAAoB;YACvI,qBAAC,GAAG,IAAC,SAAS,EAAC,uBAAuB;gBAClC,IAAI,CAAC,YAAY,EAAI;gBACvB,qBAAC,GAAG,IAAC,SAAS,EAAC,2BAA2B;oBACxC,qBAAC,GAAG,IAAC,SAAS,EAAC,oBAAoB,EAAC,EAAE,EAAG,IAAI,CAAC,KAAK,CAAC,OAAS;wBAC3D,qBAAC,IAAI,IAAC,SAAS,EAAG,IAAI,CAAC,sBAAsB,EAAI,GAC7C,IAAI,CAAC,KAAK,CAAC,QAAU,CAClB;qBACH;iBACF;gBACJ,IAAI,CAAC,cAAc,EAAI,CACrB;SACF,CACP,CAAC;IACJ,CAAC;IA9Ga,uBAAY,GAAqB;QAC7C,cAAc,EAAE,iCAAc,CAAC,IAAI;QACnC,SAAS,EAAE,IAAI;QACf,WAAW,EAAE,IAAI;KAClB,CAAC;IA2GJ,iBAAC;AAAD,CAjHA,AAiHC,CAjH+B,KAAK,CAAC,SAAS,GAiH9C;AAjHY,kBAAU,aAiHtB,CAAA","file":"components/MessageBar/MessageBar.js","sourcesContent":["import * as React from 'react';\r\nimport { Button, ButtonType } from '../../Button';\r\nimport './MessageBar.scss';\r\nimport { css } from '../../utilities/css';\r\nimport { IMessageBarProps, MessageBarType } from './MessageBar.Props';\r\nimport { getId } from '../../utilities/object';\r\n\r\nexport interface IMessageBarState {\r\n  labelId?: string;\r\n}\r\n\r\nexport class MessageBar extends React.Component<IMessageBarProps, IMessageBarState> {\r\n\r\n  public static defaultProps: IMessageBarProps = {\r\n    messageBarType: MessageBarType.info,\r\n    onDismiss: null,\r\n    isMultiline: true,\r\n  };\r\n\r\n  private ICON_MAP = {\r\n    [MessageBarType.info]: 'Info',\r\n    [MessageBarType.warning]: 'Info',\r\n    [MessageBarType.error]: 'ErrorBadge',\r\n    [MessageBarType.blocked]: 'Blocked',\r\n    [MessageBarType.remove]: 'Blocked', // TODO remove deprecated value at >= 1.0.0\r\n    [MessageBarType.severeWarning]: 'Warning',\r\n    [MessageBarType.success]: 'Completed'\r\n  };\r\n\r\n  constructor(props: IMessageBarProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      labelId: getId('MessageBar')\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let { isMultiline } = this.props;\r\n\r\n    return isMultiline ? this._renderMultiLine() : this._renderSingleLine();\r\n  }\r\n\r\n  private _getActionsDiv(): JSX.Element {\r\n    if (this.props.actions) {\r\n      return this.props.isMultiline ?\r\n        <div className='ms-MessageBar-actions'> { this.props.actions } </div> :\r\n        <div className='ms-MessageBar-actionsOneline'>\r\n          { this._getDismissDiv() }\r\n          { this.props.actions }\r\n        </div>;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getClassName(): string {\r\n    return css(this.props.className, 'ms-MessageBar', {\r\n      'ms-MessageBar': this.props.messageBarType === MessageBarType.info,\r\n      'ms-MessageBar--error': this.props.messageBarType === MessageBarType.error,\r\n      'ms-MessageBar--blocked': (this.props.messageBarType === MessageBarType.blocked) || (this.props.messageBarType === MessageBarType.remove), // TODO remove deprecated value at >= 1.0.0\r\n      'ms-MessageBar--severeWarning': this.props.messageBarType === MessageBarType.severeWarning,\r\n      'ms-MessageBar--success': this.props.messageBarType === MessageBarType.success,\r\n      'ms-MessageBar--warning': this.props.messageBarType === MessageBarType.warning\r\n    });\r\n  }\r\n\r\n  private _getDismissDiv(): JSX.Element {\r\n    if (this.props.onDismiss != null) {\r\n      return <Button\r\n        disabled={ false }\r\n        className='ms-MessageBar-dismissal'\r\n        buttonType={ ButtonType.icon }\r\n        onClick={ this.props.onDismiss }\r\n        icon='Cancel'\r\n        ariaLabel={ this.props.dismissButtonAriaLabel }\r\n        />;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private _getIconSpan(): JSX.Element {\r\n    return <div className='ms-MessageBar-icon'><i className={ `ms-Icon ms-Icon--${this.ICON_MAP[this.props.messageBarType]}` }></i></div>;\r\n  }\r\n\r\n  private _getInnerTextClassName(): string {\r\n    return this.props.onDismiss || this.props.actions ? 'ms-MessageBar-innerTextPadding' : 'ms-MessageBar-innerText';\r\n  }\r\n\r\n  private _renderMultiLine(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    return (\r\n      <div className={ this._getClassName() + ' ms-MessageBar-multiline' } role='status' aria-live='polite' aria-controls='ms-MessageBar-text'>\r\n        <div className='ms-MessageBar-content'>\r\n          { this._getIconSpan() }\r\n          <div className='ms-MessageBar-actionables'>\r\n            { this._getDismissDiv() }\r\n            <div className='ms-MessageBar-text' id={ this.state.labelId }>\r\n              <span className={ this._getInnerTextClassName() }>\r\n                { this.props.children }\r\n              </span>\r\n            </div>\r\n            { this._getActionsDiv() }\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _renderSingleLine(): React.ReactElement<React.HTMLProps<HTMLAreaElement>> {\r\n    return (\r\n      <div className={ this._getClassName() + ' ms-MessageBar-singleline' } role='status' aria-live='polite' aria-controls='ms-MessageBar-text'>\r\n        <div className='ms-MessageBar-content'>\r\n          { this._getIconSpan() }\r\n          <div className='ms-MessageBar-actionables'>\r\n            <div className='ms-MessageBar-text' id={ this.state.labelId }>\r\n              <span className={ this._getInnerTextClassName() }>\r\n                { this.props.children }\r\n              </span>\r\n            </div>\r\n          </div>\r\n          { this._getActionsDiv() }\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}