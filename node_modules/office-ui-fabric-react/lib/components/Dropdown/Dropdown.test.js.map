{"version":3,"sources":["components/Dropdown/Dropdown.test.tsx"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AACtC,sCAAsC;AAEhC,wBAAM,CAAU;AAEtB,yBAAyB,YAAY,CAAC,CAAA;AAGtC,QAAQ,CAAC,UAAU,EAAE;IAEnB,EAAE,CAAC,wCAAwC,EAAE;QAC3C,IAAM,OAAO,GAAsB;YACjC,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;YACvB,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;YACvB,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE;SACxB,CAAC;QACF,IAAI,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QAC9C,QAAQ,CAAC,MAAM,CACb,oBAAC,mBAAQ,GACP,KAAK,EAAC,WAAW,EACjB,OAAO,EAAG,OAAS,EACjB,EACJ,SAAS,CAAC,CAAC;QACb,IAAI,YAAY,GAAG,SAAS,CAAC,aAAa,CAAC,cAAc,CAAgB,CAAC;QAE1E,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,uBAAuB,CAAC,CAAC;QACpF,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,EAAE,mBAAmB,CAAC,CAAC;QAE3F,QAAQ,CAAC,MAAM,CACb,oBAAC,mBAAQ,GACP,QAAQ,EAAG,IAAM,EACjB,KAAK,EAAC,WAAW,EACjB,OAAO,EAAG,OAAS,EACjB,EACJ,SAAS,CAAC,CAAC;QAEb,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,aAAa,EAAE,oBAAoB,CAAC,CAAC;QAC7E,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,mBAAmB,CAAC,CAAC;IAC9F,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"components/Dropdown/Dropdown.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nlet { expect } = chai;\r\n\r\nimport { Dropdown } from './Dropdown';\r\nimport { IDropdownOption } from './Dropdown.Props';\r\n\r\ndescribe('Dropdown', () => {\r\n\r\n  it('Can flip between enabled and disabled.', () => {\r\n    const options: IDropdownOption[] = [\r\n      { key: '1', text: '1' },\r\n      { key: '2', text: '2' },\r\n      { key: '3', text: '3' }\r\n    ];\r\n    let container = document.createElement('div');\r\n    ReactDOM.render(\r\n      <Dropdown\r\n        label='testgroup'\r\n        options={ options }\r\n        />,\r\n      container);\r\n    let dropdownRoot = container.querySelector('.ms-Dropdown') as HTMLElement;\r\n\r\n    expect(dropdownRoot.className).not.contains('is-disabled', `shouldn't be disabled`);\r\n    expect(dropdownRoot.getAttribute('data-is-focusable')).equals('true', 'data-is-focusable');\r\n\r\n    ReactDOM.render(\r\n      <Dropdown\r\n        disabled={ true }\r\n        label='testgroup'\r\n        options={ options }\r\n        />,\r\n      container);\r\n\r\n    expect(dropdownRoot.className).contains('is-disabled', `should be disabled`);\r\n    expect(dropdownRoot.getAttribute('data-is-focusable')).equals('false', 'data-is-focusable');\r\n  });\r\n\r\n});"],"sourceRoot":"..\\..\\..\\src"}