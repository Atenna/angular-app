{"version":3,"sources":["components/Checkbox/Checkbox.tsx"],"names":[],"mappings":"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","file":"components/Checkbox/Checkbox.js","sourcesContent":["import * as React from 'react';\r\nimport { BaseComponent } from '../../common/BaseComponent';\r\nimport {\r\n  ICheckbox,\r\n  ICheckboxProps\r\n} from './Checkbox.Props';\r\nimport { autobind } from '../../utilities/autobind';\r\nimport { css } from '../../utilities/css';\r\nimport { getId } from '../../utilities/object';\r\nimport './Checkbox.scss';\r\n\r\nexport interface ICheckboxState {\r\n  /** Is true when the control has focus. */\r\n  isFocused?: boolean;\r\n\r\n  /** Is true when Uncontrolled control is checked. */\r\n  isChecked?: boolean;\r\n}\r\n\r\nexport class Checkbox extends BaseComponent<ICheckboxProps, ICheckboxState> implements ICheckbox {\r\n  public static defaultProps: ICheckboxProps = {\r\n  };\r\n\r\n  private _id: string;\r\n  private _checkBox: HTMLInputElement;\r\n\r\n  constructor(props: ICheckboxProps) {\r\n    super(props);\r\n\r\n    this._id = getId('checkbox-');\r\n    this.state = {\r\n      isFocused: false,\r\n      isChecked: props.defaultChecked || false\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    const {\r\n      checked,\r\n      className,\r\n      defaultChecked,\r\n      disabled,\r\n      inputProps,\r\n      label\r\n    } = this.props;\r\n\r\n    const { isFocused } = this.state;\r\n    const isChecked = checked === undefined ? this.state.isChecked : checked;\r\n\r\n    return (\r\n      <div\r\n        className={ css('ms-Checkbox', className, { 'is-inFocus': isFocused }) }\r\n        >\r\n        <input\r\n          { ...inputProps }\r\n          { ...(checked !== undefined && { checked }) }\r\n          { ...(defaultChecked !== undefined && { defaultChecked }) }\r\n          disabled={ disabled }\r\n          ref={ this._resolveRef('_checkBox') }\r\n          id={ this._id }\r\n          name={ this._id }\r\n          className='ms-Checkbox-input'\r\n          type='checkbox'\r\n          onChange={ this._onChange }\r\n          onFocus={ this._onFocus }\r\n          onBlur={ this._onBlur }\r\n          aria-checked={ isChecked }\r\n          />\r\n        { this.props.children }\r\n        <label htmlFor={ this._id }\r\n          className={ css('ms-Checkbox-label', {\r\n            'is-checked': isChecked,\r\n            'is-disabled': disabled\r\n          })\r\n          }\r\n          >\r\n          { label && <span className='ms-Label'>{ label }</span> }\r\n        </label>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  public get checked(): boolean {\r\n    return this._checkBox ? this._checkBox.checked : false;\r\n  }\r\n\r\n  public focus() {\r\n    if (this._checkBox) {\r\n      this._checkBox.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onFocus(ev: React.FocusEvent<HTMLInputElement>): void {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onFocus) {\r\n      inputProps.onFocus(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: true });\r\n  }\r\n\r\n  @autobind\r\n  private _onBlur(ev: React.FocusEvent<HTMLInputElement>): void {\r\n    const { inputProps } = this.props;\r\n\r\n    if (inputProps && inputProps.onBlur) {\r\n      inputProps.onBlur(ev);\r\n    }\r\n\r\n    this.setState({ isFocused: false });\r\n  }\r\n\r\n  @autobind\r\n  private _onChange(ev: React.FormEvent<HTMLInputElement>) {\r\n    const { onChange } = this.props;\r\n    const isChecked = (ev.target as HTMLInputElement).checked;\r\n\r\n    if (onChange) {\r\n      onChange(ev, isChecked);\r\n    }\r\n\r\n    if (this.props.checked === undefined) {\r\n      this.setState({ isChecked: isChecked });\r\n    }\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}