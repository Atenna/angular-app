{"version":3,"sources":["components/pickers/AutoFill/BaseAutoFill.tsx"],"names":[],"mappings":"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","file":"components/pickers/AutoFill/BaseAutoFill.js","sourcesContent":["import * as React from 'react';\r\nimport { IBaseAutoFillProps, IBaseAutoFill } from './BaseAutoFill.Props';\r\nimport { BaseComponent } from '../../../common/BaseComponent';\r\nimport { getNativeProps, inputProperties } from '../../../utilities/properties';\r\nimport { autobind } from '../../../utilities/autobind';\r\nimport { KeyCodes } from '../../../utilities/KeyCodes';\r\n\r\nexport interface IBaseAutoFillState {\r\n  value?: string;\r\n}\r\n\r\nconst SELECTION_FORWARD = 'forward';\r\nconst SELECTION_BACKWARD = 'backward';\r\n\r\nexport class BaseAutoFill extends BaseComponent<IBaseAutoFillProps, IBaseAutoFillState> implements IBaseAutoFill {\r\n\r\n  private _inputElement: HTMLInputElement;\r\n\r\n  constructor(props: IBaseAutoFillProps) {\r\n    super(props);\r\n    this.state = {\r\n      value: ''\r\n    };\r\n  }\r\n\r\n  public get cursorLocation(): number {\r\n    if (this._inputElement) {\r\n      let inputElement = this._inputElement;\r\n      if (inputElement.selectionDirection !== SELECTION_FORWARD) {\r\n        return inputElement.selectionEnd;\r\n      } else {\r\n        return inputElement.selectionStart;\r\n      }\r\n    } else {\r\n      return -1;\r\n    }\r\n  }\r\n\r\n  public get isValueSelected(): boolean {\r\n    return this.inputElement.selectionStart !== this.inputElement.selectionEnd;\r\n  }\r\n\r\n  public get value(): string {\r\n    return this.state.value;\r\n  }\r\n\r\n  public get selectionStart(): number {\r\n    return this._inputElement ? this._inputElement.selectionStart : -1;\r\n  }\r\n\r\n  public get selectionEnd(): number {\r\n    return this._inputElement ? this._inputElement.selectionEnd : -1;\r\n  }\r\n\r\n  public get inputElement(): HTMLInputElement {\r\n    return this._inputElement;\r\n  }\r\n\r\n  public componentDidUpdate() {\r\n    let { value } = this.state;\r\n    let { suggestedDisplayValue } = this.props;\r\n    let differenceIndex = 0;\r\n    if (value && suggestedDisplayValue && this._doesTextStartWith(suggestedDisplayValue, value)) {\r\n      while (differenceIndex < value.length && value[differenceIndex].toLocaleLowerCase() === suggestedDisplayValue[differenceIndex].toLocaleLowerCase()) {\r\n        differenceIndex++;\r\n      }\r\n      if (differenceIndex > 0) {\r\n        this._inputElement.setSelectionRange(differenceIndex, suggestedDisplayValue.length, SELECTION_BACKWARD);\r\n      }\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let {\r\n      value\r\n    } = this.state;\r\n    let {\r\n      suggestedDisplayValue\r\n    } = this.props;\r\n    let displayValue = value;\r\n\r\n    if (this._doesTextStartWith(suggestedDisplayValue, value)) {\r\n      displayValue = suggestedDisplayValue;\r\n    }\r\n\r\n    const nativeProps = getNativeProps(this.props, inputProperties);\r\n    return <input { ...nativeProps}\r\n      ref={ this._resolveRef('_inputElement') }\r\n      value={ displayValue }\r\n      autoCapitalize={ 'off' }\r\n      autoComplete={ 'off' }\r\n      onChange={ this._onChange }\r\n      onKeyDown={ this._onKeyDown }\r\n      />;\r\n  }\r\n\r\n  public focus() {\r\n    this._inputElement.focus();\r\n  }\r\n\r\n  public clear() {\r\n    this._updateValue('');\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyDown(ev: React.KeyboardEvent<HTMLElement>) {\r\n    switch (ev.which) {\r\n      case KeyCodes.backspace:\r\n        this._handleBackspace(ev);\r\n        break;\r\n    }\r\n  }\r\n\r\n  private _handleBackspace(ev: React.KeyboardEvent<HTMLElement>) {\r\n    let { value } = this.state;\r\n    if (value && value.length > 0) {\r\n      this._updateValue(value.substring(0, value.length - 1));\r\n      // Since this effectively deletes a letter from the string we need to preventDefault so that\r\n      // the backspace doesn't try to delete a letter that's already been deleted. If a letter is deleted\r\n      // it can trigger the onChange event again which can have unintended consequences.\r\n      ev.preventDefault();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onChange(ev: React.FormEvent<HTMLElement>) {\r\n    let value: string = (ev.target as HTMLInputElement).value;\r\n    this._updateValue(value);\r\n  }\r\n\r\n  private _notifyInputChange(newValue: string) {\r\n    if (this.props.onInputValueChange) {\r\n      this.props.onInputValueChange(newValue);\r\n    }\r\n  }\r\n\r\n  private _updateValue(newValue: string) {\r\n    this.setState({\r\n      value: newValue\r\n    }, () => this._notifyInputChange(newValue));\r\n  }\r\n\r\n  private _doesTextStartWith(text: string, startWith: string) {\r\n    if (!text || !startWith) {\r\n      return false;\r\n    }\r\n    return text.toLocaleLowerCase().indexOf(startWith.toLocaleLowerCase()) === 0;\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\..\\src"}