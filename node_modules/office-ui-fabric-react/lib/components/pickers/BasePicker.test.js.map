{"version":3,"sources":["components/pickers/BasePicker.test.tsx"],"names":[],"mappings":"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","file":"components/pickers/BasePicker.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nlet { expect } = chai;\r\n\r\nimport { TagPicker, ITag, BasePicker, IBasePickerProps, IPickerItemProps } from './index';\r\n\r\nfunction onResolveSuggestions(text: string): ITag[] {\r\n  return [\r\n    'black',\r\n    'blue',\r\n    'brown',\r\n    'cyan',\r\n    'green',\r\n    'magenta',\r\n    'mauve',\r\n    'orange',\r\n    'pink',\r\n    'purple',\r\n    'red',\r\n    'rose',\r\n    'violet',\r\n    'white',\r\n    'yellow'\r\n  ].filter(tag => tag.toLowerCase().indexOf(text.toLowerCase()) === 0).map(item => ({ key: item, name: item }));\r\n}\r\n\r\nconst basicRenderer = (props) => {\r\n  return <div> { props.item.name } </div>;\r\n};\r\n\r\nconst basicSuggestionRenderer = (props) => {\r\n  return <div> { props.name } </div>;\r\n};\r\n\r\nexport interface ISimple {\r\n  key: string;\r\n  name: string;\r\n}\r\n\r\nexport type TypedBasePicker = BasePicker<ISimple, IBasePickerProps<ISimple>>;\r\n\r\ndescribe('Pickers', () => {\r\n  describe('BasePicker', () => {\r\n    const BasePickerWithType = BasePicker as new (props: IBasePickerProps<ISimple>) => BasePicker<ISimple, IBasePickerProps<ISimple>>;\r\n    it('can provide custom renderers', () => {\r\n      let root = document.createElement('div');\r\n      document.body.appendChild(root);\r\n      let picker: TypedBasePicker = ReactDOM.render(\r\n        <BasePickerWithType\r\n          onResolveSuggestions={ onResolveSuggestions }\r\n          onRenderItem={ (props: IPickerItemProps<{ key: string, name: string }>) => <div key={ props.item.name }>{ basicRenderer(props) }</div> }\r\n          onRenderSuggestionsItem={ basicSuggestionRenderer }\r\n          />,\r\n        root\r\n      ) as TypedBasePicker;\r\n      let input = document.querySelector('.ms-BasePicker-input') as HTMLInputElement;\r\n      input.focus();\r\n      input.value = 'bl';\r\n\r\n      ReactTestUtils.Simulate.change(input);\r\n\r\n      let suggestions = document.querySelector('.ms-Suggestions') as HTMLInputElement;\r\n\r\n      expect(suggestions).to.exist;\r\n      let suggestionOptions = document.querySelectorAll('.ms-Suggestions-item');\r\n\r\n      expect(suggestionOptions.length).to.be.equal(2, 'There were not 2 suggestions');\r\n      ReactTestUtils.Simulate.click(suggestionOptions[0]);\r\n\r\n      expect(picker.items.length).to.be.equal(1, 'There was not only 1 item selected');\r\n      expect(picker.items[0].name).to.be.equal('black', 'The selected item did not have the correct text');\r\n\r\n      ReactDOM.unmountComponentAtNode(root);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  describe('TagPicker', () => {\r\n\r\n    it('can search for and select tags', () => {\r\n      let root = document.createElement('div');\r\n      document.body.appendChild(root);\r\n      let picker: TagPicker = ReactDOM.render(\r\n        <TagPicker\r\n          onResolveSuggestions={ onResolveSuggestions }\r\n          />,\r\n        root\r\n      ) as TagPicker;\r\n      let input = document.querySelector('.ms-BasePicker-input') as HTMLInputElement;\r\n      input.focus();\r\n      input.value = 'bl';\r\n\r\n      ReactTestUtils.Simulate.change(input);\r\n\r\n      let suggestions = document.querySelector('.ms-Suggestions') as HTMLInputElement;\r\n\r\n      expect(suggestions).to.exist;\r\n      let suggestionOptions = document.querySelectorAll('.ms-Suggestions-item');\r\n\r\n      expect(suggestionOptions.length).to.be.equal(2, 'There were not 2 suggestions');\r\n      ReactTestUtils.Simulate.click(suggestionOptions[0]);\r\n\r\n      expect(picker.items.length).to.be.equal(1, 'There was not only 1 item selected');\r\n      expect(picker.items[0].name).to.be.equal('black', 'The selected item did not have the correct text');\r\n      ReactDOM.unmountComponentAtNode(root);\r\n\r\n    });\r\n  });\r\n});"],"sourceRoot":"..\\..\\..\\src"}