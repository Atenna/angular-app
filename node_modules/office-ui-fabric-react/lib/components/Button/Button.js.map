{"version":3,"sources":["components/Button/Button.tsx"],"names":[],"mappings":"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","file":"components/Button/Button.js","sourcesContent":["import * as React from 'react';\r\nimport { css } from '../../utilities/css';\r\nimport { assign } from '../../utilities/object';\r\nimport { IButtonProps, IButton, ButtonType } from './Button.Props';\r\nimport { getId } from '../../utilities/object';\r\nimport { getNativeProps, buttonProperties, anchorProperties } from '../../utilities/properties';\r\nimport { BaseComponent } from '../../common/BaseComponent';\r\nimport './Button.scss';\r\n\r\nexport interface IButtonState {\r\n  labelId?: string;\r\n  descriptionId?: string;\r\n  ariaDescriptionId?: string;\r\n}\r\n\r\nexport class Button extends BaseComponent<IButtonProps, IButtonState> implements IButton {\r\n  public static defaultProps: IButtonProps = {\r\n    buttonType: ButtonType.normal\r\n  };\r\n  private _buttonElement: HTMLButtonElement;\r\n\r\n  constructor(props: IButtonProps) {\r\n    super(props, { 'rootProps': null });\r\n\r\n    this.state = {\r\n      labelId: getId('Button'),\r\n      descriptionId: getId('Button'),\r\n      ariaDescriptionId: getId('Button')\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    let { buttonType, children, icon, description, ariaLabel, ariaDescription, href, disabled, onClick } = this.props;\r\n    let { labelId, descriptionId, ariaDescriptionId } = this.state;\r\n\r\n    const renderAsAnchor: boolean = !!href;\r\n    const tag = renderAsAnchor ? 'a' : 'button';\r\n    const nativeProps = getNativeProps(this.props.rootProps || this.props, renderAsAnchor ? anchorProperties : buttonProperties);\r\n    const className = css((this.props.className), 'ms-Button', {\r\n      'ms-Button--primary': buttonType === ButtonType.primary,\r\n      'ms-Button--hero': buttonType === ButtonType.hero,\r\n      'ms-Button--compound': buttonType === ButtonType.compound,\r\n      'ms-Button--command': buttonType === ButtonType.command,\r\n      'ms-Button--icon': buttonType === ButtonType.icon,\r\n      'disabled': (renderAsAnchor && disabled) // add disable styling if it is an anchor\r\n      // if not utilize default button disabled behavior.\r\n    });\r\n\r\n    const iconSpan = icon && (buttonType === ButtonType.command || buttonType === ButtonType.hero || buttonType === ButtonType.icon)\r\n      ? <span className='ms-Button-icon'><i className={ `ms-Icon ms-Icon--${icon}` }></i></span>\r\n      : null;\r\n\r\n    // ms-Button-description is only shown when the button type is compound.\r\n    // In other cases it will not be displayed.\r\n    const descriptionSpan: React.ReactElement<React.HTMLProps<HTMLSpanElement>> = description\r\n      ? <span className='ms-Button-description' id={ descriptionId }>{ description }</span>\r\n      : null;\r\n\r\n    // If ariaDescription is given, descriptionId will be assigned to ariaDescriptionSpan,\r\n    // otherwise it will be assigned to descriptionSpan.\r\n    const ariaDescriptionSpan: React.ReactElement<React.HTMLProps<HTMLSpanElement>> = ariaDescription\r\n      ? <span className='ms-u-screenReaderOnly' id={ ariaDescriptionId }>{ ariaDescription }</span>\r\n      : null;\r\n\r\n    // Check for ariaDescription, description or aria-describedby in the native props to determine source of aria-describedby\r\n    // otherwise default to null.\r\n    let ariaDescribedBy;\r\n\r\n    if (ariaDescription) {\r\n      ariaDescribedBy = ariaDescriptionId;\r\n    } else if (description) {\r\n      ariaDescribedBy = descriptionId;\r\n    } else if (nativeProps['aria-describedby']) {\r\n      ariaDescribedBy = nativeProps['aria-describedby'];\r\n    } else {\r\n      ariaDescribedBy = null;\r\n    }\r\n\r\n    return React.createElement(\r\n      tag,\r\n      assign(\r\n        {},\r\n        nativeProps,\r\n        href ? { href } : null,\r\n        {\r\n          'aria-label': ariaLabel,\r\n          'aria-labelledby': ariaLabel ? null : labelId,\r\n          'aria-describedby': ariaDescribedBy,\r\n          'ref': (c: HTMLButtonElement): HTMLButtonElement => this._buttonElement = c\r\n        },\r\n        onClick && { 'onClick': onClick },\r\n        disabled && { 'disabled': disabled },\r\n        { className }),\r\n      iconSpan,\r\n      <span className='ms-Button-label' id={ labelId } >{ children }</span>,\r\n      descriptionSpan,\r\n      ariaDescriptionSpan\r\n    );\r\n  }\r\n\r\n  public focus(): void {\r\n    if (this._buttonElement) {\r\n      this._buttonElement.focus();\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}