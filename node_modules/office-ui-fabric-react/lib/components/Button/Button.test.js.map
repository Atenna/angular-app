{"version":3,"sources":["components/Button/Button.test.tsx"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,IAAY,QAAQ,WAAM,WAAW,CAAC,CAAA;AACtC,sCAAsC;AAEtC,IAAY,cAAc,WAAM,yBAAyB,CAAC,CAAA;AAC1D,uBAAuB,UAAU,CAAC,CAAA;AAE5B,wBAAM,CAAU;AAEtB,QAAQ,CAAC,QAAQ,EAAE;IAEjB,EAAE,CAAC,gCAAgC,EAAE;QACnC,IAAM,MAAM,GAAG,cAAc,CAAC,kBAAkB,CAC9C,oBAAC,eAAM,QAAC,OAAK,CAAS,CACvB,CAAC;QACF,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,MAA6B,CAAC,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,4CAA4C,CAAC,CAAC;IAC7F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6BAA6B,EAAE;QAChC,IAAI,OAAO,GAAG,cAAM,OAAA,IAAI,EAAJ,CAAI,CAAC;QAEzB,IAAM,MAAM,GAAG,cAAc,CAAC,kBAAkB,CAC9C,oBAAC,eAAM,GAAC,OAAO,EAAG,OAAS,GAAC,OAAK,CAAS,CAC3C,CAAC;QACF,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,MAA6B,CAAC,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,2CAA2C,CAAC,CAAC;IAC5F,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,yBAAyB,EAAE;QAC5B,IAAM,MAAM,GAAG,cAAc,CAAC,kBAAkB,CAC9C,oBAAC,eAAM,GAAC,IAAI,EAAC,0BAA0B,EAAC,MAAM,EAAC,QAAQ,GAAC,OAAK,CAAS,CACvE,CAAC;QACF,IAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,MAA6B,CAAC,CAAC;QACxE,OAAO,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;QACjC,MAAM,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,GAAG,EAAE,4CAA4C,CAAC,CAAC;IACxF,CAAC,CAAC,CAAC;AAEL,CAAC,CAAC,CAAC","file":"components/Button/Button.test.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport * as ReactTestUtils from 'react-addons-test-utils';\r\nimport { Button } from './Button';\r\n\r\nlet { expect } = chai;\r\n\r\ndescribe('Button', () => {\r\n\r\n  it('can render without an onClick.', () => {\r\n    const button = ReactTestUtils.renderIntoDocument<Button>(\r\n      <Button>Hello</Button>\r\n    );\r\n    const renderedDOM = ReactDOM.findDOMNode(button as React.ReactInstance);\r\n    console.log(renderedDOM.tagName);\r\n    expect(renderedDOM.tagName).equals('BUTTON', 'A Button with no onClick renders as a span');\r\n  });\r\n\r\n  it('can render with an onClick.', () => {\r\n    let onClick = () => null;\r\n\r\n    const button = ReactTestUtils.renderIntoDocument<Button>(\r\n      <Button onClick={ onClick }>Hello</Button>\r\n    );\r\n    const renderedDOM = ReactDOM.findDOMNode(button as React.ReactInstance);\r\n    console.log(renderedDOM.tagName);\r\n    expect(renderedDOM.tagName).equals('BUTTON', 'A Button with onClick renders as a button');\r\n  });\r\n\r\n  it('can render with an href', () => {\r\n    const button = ReactTestUtils.renderIntoDocument<Button>(\r\n      <Button href='http://www.microsoft.com' target='_blank'>Hello</Button>\r\n    );\r\n    const renderedDOM = ReactDOM.findDOMNode(button as React.ReactInstance);\r\n    console.log(renderedDOM.tagName);\r\n    expect(renderedDOM.tagName).equals('A', 'A Button with an href renders as an anchor');\r\n  });\r\n\r\n});\r\n"],"sourceRoot":"..\\..\\..\\src"}