{"version":3,"sources":["components/ProgressIndicator/ProgressIndicator.tsx"],"names":[],"mappings":";;;;;;AAAA,uCAAuC;AACvC,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAI/B,8BAA8B,4BAA4B,CAAC,CAAA;AAC3D,oBAAoB,qBAAqB,CAAC,CAAA;AAC1C,QAAO,0BAA0B,CAAC,CAAA;AAElC,sDAAsD;AACtD,mDAAmD;AACnD,IAAM,cAAc,GAAG,IAAI,CAAC;AAE5B;IAAuC,qCAA0C;IAQ/E,2BAAY,KAA8B;QACxC,kBAAM,KAAK,EAAE;YACX,OAAO,EAAE,OAAO;SACjB,CAAC,CAAC;IACL,CAAC;IAEM,kCAAM,GAAb;QACE,IAAA,eAA0E,EAApE,gBAAK,EAAE,gBAAK,EAAE,4BAAW,EAAE,oCAAe,EAAE,wBAAS,CAAgB;QAE3E,2BAA2B;QAC3B,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,KAAK,GAAG,KAAK,CAAC;QAChB,CAAC;QAED,eAAe,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE,eAAe,GAAG,GAAG,CAAC,CAAC,CAAC;QAEpE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,sBAAsB,EAAE,SAAS,CAAG;YACvD,qBAAC,GAAG,IAAC,SAAS,EAAC,+BAA+B,GAAG,KAAO,CAAM;YAC9D,qBAAC,GAAG,IAAC,SAAS,EAAC,mCAAmC;gBAChD,qBAAC,GAAG,IAAC,SAAS,EAAC,oCAAoC,EAAO;gBAC1D,qBAAC,GAAG,IAAC,SAAS,EAAG,SAAG,CAAC,kCAAkC,EAAE;oBACrD,kBAAkB,EAAE,eAAe,GAAG,cAAc;iBACrD,CAAE,EACH,KAAK,EAAG,EAAE,KAAK,EAAE,eAAe,GAAG,GAAG,EAAI,EAC1C,IAAI,EAAC,aAAa,GAClB,aAAa,GAAC,GAAG,GACjB,aAAa,GAAC,KAAK,GACnB,aAAa,GAAG,eAAe,CAAC,OAAO,EAAE,CAAC,QAAQ,EAAI,EAClD,CACF;YACN,qBAAC,GAAG,IAAC,SAAS,EAAC,sCAAsC,GAAG,WAAa,CAAM,CACvE,CACP,CAAC;IACJ,CAAC;IAzCa,8BAAY,GAAG;QAC3B,KAAK,EAAE,EAAE;QACT,WAAW,EAAE,EAAE;QACf,eAAe,EAAE,CAAC;QAClB,KAAK,EAAE,GAAG;KACX,CAAC;IAqCJ,wBAAC;AAAD,CA3CA,AA2CC,CA3CsC,6BAAa,GA2CnD;AA3CY,yBAAiB,oBA2C7B,CAAA","file":"components/ProgressIndicator/ProgressIndicator.js","sourcesContent":["/* tslint:disable:no-unused-variable */\r\nimport * as React from 'react';\r\n/* tslint:enable:no-unused-variable */\r\n\r\nimport { IProgressIndicatorProps } from './ProgressIndicator.Props';\r\nimport { BaseComponent } from '../../common/BaseComponent';\r\nimport { css } from '../../utilities/css';\r\nimport './ProgressIndicator.scss';\r\n\r\n// if the percentComplete is near 0, don't animate it.\r\n// This prevents animations on reset to 0 scenarios\r\nconst ZERO_THRESHOLD = 0.01;\r\n\r\nexport class ProgressIndicator extends BaseComponent<IProgressIndicatorProps, {}> {\r\n  public static defaultProps = {\r\n    label: '',\r\n    description: '',\r\n    percentComplete: 0,\r\n    width: 180\r\n  };\r\n\r\n  constructor(props: IProgressIndicatorProps) {\r\n    super(props, {\r\n      'title': 'label'\r\n    });\r\n  }\r\n\r\n  public render() {\r\n    let { title, label, description, percentComplete, className } = this.props;\r\n\r\n    // Handle deprecated value.\r\n    if (title) {\r\n      label = title;\r\n    }\r\n\r\n    percentComplete = Math.min(100, Math.max(0, percentComplete * 100));\r\n\r\n    return (\r\n      <div className={ css('ms-ProgressIndicator', className) }>\r\n        <div className='ms-ProgressIndicator-itemName'>{ label }</div>\r\n        <div className='ms-ProgressIndicator-itemProgress'>\r\n          <div className='ms-ProgressIndicator-progressTrack'></div>\r\n          <div className={ css('ms-ProgressIndicator-progressBar', {\r\n              'smoothTransition': percentComplete > ZERO_THRESHOLD\r\n            })}\r\n            style={ { width: percentComplete + '%' } }\r\n            role='progressbar'\r\n            aria-valuemin='0'\r\n            aria-valuemax='100'\r\n            aria-valuenow={ percentComplete.toFixed().toString() }>\r\n          </div>\r\n        </div>\r\n        <div className='ms-ProgressIndicator-itemDescription'>{ description }</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}