{"version":3,"sources":["components/FocusTrapZone/FocusTrapZone.tsx"],"names":[],"mappings":"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","file":"components/FocusTrapZone/FocusTrapZone.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  BaseComponent,\r\n  KeyCodes,\r\n  autobind,\r\n  elementContains,\r\n  getNativeProps,\r\n  divProperties\r\n} from '../../Utilities';\r\nimport { IFocusTrapZone, IFocusTrapZoneProps } from './FocusTrapZone.Props';\r\nimport {\r\n  getFirstFocusable,\r\n  getLastFocusable,\r\n  getNextElement\r\n} from '../../utilities/focus';\r\n\r\nexport class FocusTrapZone extends BaseComponent<IFocusTrapZoneProps, {}> implements IFocusTrapZone {\r\n\r\n  public refs: {\r\n    [key: string]: React.ReactInstance,\r\n    root: HTMLElement\r\n  };\r\n\r\n  private _previouslyFocusedElement: HTMLElement;\r\n\r\n  public componentDidMount() {\r\n    let { elementToFocusOnDismiss, isClickableOutsideFocusTrap = false, forceFocusInsideTrap = true } = this.props;\r\n\r\n    this._previouslyFocusedElement = elementToFocusOnDismiss ? elementToFocusOnDismiss : document.activeElement as HTMLElement;\r\n    this.focus();\r\n\r\n    if (forceFocusInsideTrap) {\r\n      this._events.on(window, 'focus', this._forceFocusInTrap, true);\r\n    }\r\n\r\n    if (!isClickableOutsideFocusTrap) {\r\n      this._events.on(window, 'click', this._forceClickInTrap, true);\r\n    }\r\n  }\r\n\r\n  public componentWillUnmount() {\r\n    let { ignoreExternalFocusing } = this.props;\r\n\r\n    if (!ignoreExternalFocusing && this._previouslyFocusedElement) {\r\n      this._previouslyFocusedElement.focus();\r\n    }\r\n  }\r\n\r\n  public render() {\r\n    let { className, ariaLabelledBy } = this.props;\r\n    let divProps = getNativeProps(this.props, divProperties);\r\n\r\n    return (\r\n      <div\r\n        { ...divProps }\r\n        className={ className }\r\n        ref='root'\r\n        aria-labelledby={ ariaLabelledBy }\r\n        onKeyDown={ this._onKeyboardHandler }>\r\n        { this.props.children }\r\n      </div>\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Need to expose this method in case of popups since focus needs to be set when popup is opened\r\n   */\r\n  public focus() {\r\n    let { firstFocusableSelector } = this.props;\r\n    let _firstFocusableChild;\r\n    let root = this.refs.root;\r\n\r\n    if (firstFocusableSelector) {\r\n      _firstFocusableChild = root.querySelector('.' + firstFocusableSelector);\r\n    } else {\r\n      _firstFocusableChild = getNextElement(root, root.firstChild as HTMLElement, true, false, false, true);\r\n    }\r\n    if (_firstFocusableChild) {\r\n      _firstFocusableChild.focus();\r\n    }\r\n  }\r\n\r\n  @autobind\r\n  private _onKeyboardHandler(ev: React.KeyboardEvent<HTMLElement>) {\r\n    if (ev.which !== KeyCodes.tab) {\r\n      return;\r\n    }\r\n\r\n    let { root } = this.refs;\r\n\r\n    const _firstFocusableChild = getFirstFocusable(root, root.firstChild as HTMLElement, true);\r\n    const _lastFocusableChild = getLastFocusable(root, root.lastChild as HTMLElement, true);\r\n\r\n    if (ev.shiftKey && _firstFocusableChild === ev.target) {\r\n      _lastFocusableChild.focus();\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    } else if (!ev.shiftKey && _lastFocusableChild === ev.target) {\r\n      _firstFocusableChild.focus();\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _forceFocusInTrap(ev: FocusEvent) {\r\n    const focusedElement = document.activeElement as HTMLElement;\r\n\r\n    if (!elementContains(this.refs.root, focusedElement)) {\r\n      this.focus();\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n\r\n  private _forceClickInTrap(ev: MouseEvent) {\r\n    const clickedElement = ev.target as HTMLElement;\r\n\r\n    if (clickedElement && !elementContains(this.refs.root, clickedElement)) {\r\n      this.focus();\r\n      ev.preventDefault();\r\n      ev.stopPropagation();\r\n    }\r\n  }\r\n}"],"sourceRoot":"..\\..\\..\\src"}