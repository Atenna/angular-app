{"version":3,"sources":["components/ColorPicker/ColorPicker.tsx"],"names":[],"mappings":"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","file":"components/ColorPicker/ColorPicker.js","sourcesContent":["import * as React from 'react';\r\nimport { IColorPickerProps } from './ColorPicker.Props';\r\nimport { TextField } from '../../TextField';\r\nimport { ColorRectangle } from './ColorRectangle';\r\nimport { ColorSlider } from './ColorSlider';\r\nimport { autobind } from '../../utilities/autobind';\r\nimport {\r\n  IColor,\r\n  MAX_COLOR_HUE,\r\n  getColorFromString,\r\n  updateA,\r\n  updateH,\r\n  updateSV\r\n} from './colors';\r\nimport './ColorPicker.scss';\r\n\r\nexport interface IColorPickerState {\r\n  isOpen: boolean;\r\n  color: IColor;\r\n}\r\n\r\nexport interface IColor {\r\n  r: number;\r\n  g: number;\r\n  b: number;\r\n  a: number;\r\n  h: number;\r\n  s: number;\r\n  v: number;\r\n  hex: string;\r\n  str: string;\r\n}\r\n\r\nexport class ColorPicker extends React.Component<IColorPickerProps, any> {\r\n  constructor(props: IColorPickerProps) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      color: getColorFromString(props.color)\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { color } = this.state;\r\n\r\n    return (\r\n      <div className='ms-ColorPicker'>\r\n        <div className='ms-ColorPicker-panel'>\r\n          <ColorRectangle color={ color } onSVChanged={ this._onSVChanged } />\r\n          <ColorSlider\r\n            className='is-hue'\r\n            minValue={ 0 }\r\n            maxValue={ MAX_COLOR_HUE }\r\n            initialValue={ color.h }\r\n            onChanged={ this._onHChanged }\r\n            />\r\n          <ColorSlider\r\n            className='is-alpha'\r\n            overlayStyle={ { background: `linear-gradient(to right, transparent 0, ${color.str} 100%)` } }\r\n            minValue={ 0 }\r\n            maxValue={ 100 }\r\n            initialValue={ color.a }\r\n            onChanged={ this._onAChanged }\r\n            />\r\n          <table className='ms-ColorPicker-table' cellPadding='0' cellSpacing='0'>\r\n            <thead>\r\n              <tr className='ms-font-s'>\r\n                <td>Hex</td>\r\n                <td>Red</td>\r\n                <td>Green</td>\r\n                <td>Blue</td>\r\n                <td>Alpha</td>\r\n              </tr>\r\n            </thead>\r\n            <tbody>\r\n              <tr>\r\n                <td><TextField className='ms-ColorPicker-input' value={ color.hex } /></td>\r\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.r } /></td>\r\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.g } /></td>\r\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.b } /></td>\r\n                <td style={ { width: '18%' } }><TextField className='ms-ColorPicker-input' value={ color.a } /></td>\r\n              </tr>\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  @autobind\r\n  private _onSVChanged(s: number, v: number) {\r\n    this._updateColor(updateSV(this.state.color, s, v));\r\n  }\r\n\r\n  @autobind\r\n  private _onHChanged(h: number) {\r\n    this._updateColor(updateH(this.state.color, h));\r\n  }\r\n\r\n  @autobind\r\n  private _onAChanged(a: number) {\r\n    this._updateColor(updateA(this.state.color, a));\r\n  }\r\n\r\n  private _updateColor(newColor: IColor) {\r\n    let { onColorChanged } = this.props;\r\n\r\n    if (newColor.str !== this.state.color.str) {\r\n      this.setState({\r\n        color: newColor\r\n      });\r\n\r\n      if (onColorChanged) {\r\n        onColorChanged(newColor.str);\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}