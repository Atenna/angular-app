{"version":3,"sources":["demo/utilities/debugging.ts"],"names":[],"mappings":";AAAA,qBAAqB,QAAQ,CAAC,CAAA;AAE9B,0BAAiC,MAAW,EAAE,UAAkB;IAC9D,IAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,CAAC;IAE1C,MAAM,CAAC,UAAU,CAAC,GAAG;QACnB,WAAI,EAAE,CAAC;QAEP,IAAI,SAAS,GAAG,WAAW,CAAC,GAAG,EAAE,CAAC;QAClC,IAAI,MAAM,GAAG,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QACnD,IAAI,QAAQ,GAAG,WAAW,CAAC,GAAG,EAAE,GAAG,SAAS,CAAC;QAE7C,+BAA+B;QAC/B,EAAE,CAAC,CAAC,QAAQ,IAAI,CAAC,CAAC,CAAC,CAAC;YAClB,OAAO,CAAC,GAAG,CAAK,UAAU,YAAU,EAAE,aAAa,EAAE,CAAC,CAAC;QACzD,CAAC;QAAC,IAAI,CAAC,EAAE,CAAC,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC,CAAC;YAC1B,OAAO,CAAC,IAAI,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QAC1G,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,CAAC,KAAK,CAAK,UAAU,sBAAmB,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,IAAI,OAAK,EAAE,aAAa,EAAE,CAAC,CAAC;QAC3G,CAAC;QACD,8BAA8B;QAE9B,MAAM,CAAC,MAAM,CAAC;IAChB,CAAC,CAAC;AACJ,CAAC;AAtBe,wBAAgB,mBAsB/B,CAAA;AAED;IACE,IAAI,GAAG,GAAG;QACR,KAAK,EAAE,EAAE;KACV,CAAC;IAEF,sCAAsC;IACtC,IAAM,iBAAiB,GAAG,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACrD,qCAAqC;IAErC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACtB,iBAAiB,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC;QACtC,IAAI,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QAE1C,GAAG,CAAC,KAAK,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC;AACnB,CAAC;AAjBe,qBAAa,gBAiB5B,CAAA","file":"demo/utilities/debugging.js","sourcesContent":["import { beep } from './beep';\r\n\r\nexport function instrumentMethod(target: any, methodName: string) {\r\n  const originalMethod = target[methodName];\r\n\r\n  target[methodName] = function() {\r\n    beep();\r\n\r\n    let startTime = performance.now();\r\n    let retVal = originalMethod.apply(this, arguments);\r\n    let duration = performance.now() - startTime;\r\n\r\n    /* tslint:disable:no-console */\r\n    if (duration <= 1) {\r\n      console.log(`${ methodName } called`, getStackTrace());\r\n    } else if (duration <= 10) {\r\n      console.warn(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\r\n    } else {\r\n      console.error(`${ methodName } called, took ${ Math.round(duration * 1000) / 1000 }ms`, getStackTrace());\r\n    }\r\n    /* tslint:enable:no-console */\r\n\r\n    return retVal;\r\n  };\r\n}\r\n\r\nexport function getStackTrace() {\r\n  let obj = {\r\n    stack: ''\r\n  };\r\n\r\n  /* tslint:disable:no-string-literal */\r\n  const captureStackTrace = Error['captureStackTrace'];\r\n  /* tslint:enable:no-string-literal */\r\n\r\n  if (captureStackTrace) {\r\n    captureStackTrace(obj, getStackTrace);\r\n    let stackEntries = obj.stack.split('at ');\r\n\r\n    obj.stack = stackEntries[2];\r\n  }\r\n\r\n  return obj.stack;\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}