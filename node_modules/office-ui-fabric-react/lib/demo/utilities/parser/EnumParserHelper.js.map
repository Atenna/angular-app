{"version":3,"sources":["demo/utilities/parser/EnumParserHelper.ts"],"names":[],"mappings":"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","file":"demo/utilities/parser/EnumParserHelper.js","sourcesContent":["import { BaseParser } from './BaseParser';\r\nimport { IEnumProperty } from '../../components/index';\r\n\r\n/**\r\n * Supporting enum for the parser, used internally within the parser only.\r\n */\r\nenum ParseState {\r\n  default, comment, declaration\r\n}\r\n\r\n/**\r\n * Helper Parser that parses enums.\r\n */\r\nexport class EnumParserHelper extends BaseParser {\r\n  private _state: ParseState = ParseState.default;\r\n\r\n  /**\r\n   * @constructor\r\n   * Helper Parser that parses enums.\r\n   */\r\n  public constructor(str: string) {\r\n    super(str);\r\n  }\r\n\r\n  public parse(): Array<IEnumProperty> {\r\n    let bank: Array<string> = [];\r\n    let comment = '';\r\n    let identifierName = '';\r\n    let returnResult = [];\r\n    let noClosingSymbolAsterixPrereq = false;\r\n\r\n    this.eatUntil(/\\{/);\r\n    this.eat('{');\r\n\r\n    do {\r\n      switch (this._state) {\r\n        case ParseState.default:\r\n          this.eatSpacesAndNewlines();\r\n          if (this.eat('/')) {\r\n            if (this.peek() === '*') {\r\n              this._state = ParseState.comment;\r\n            } else {\r\n              // ignore // comments\r\n              this.eatUntil(/[\\n]/);\r\n            }\r\n          } else if (this.eat('}')) {\r\n            // closing\r\n            break;\r\n          } else {\r\n            this._state = ParseState.declaration;\r\n          }\r\n\r\n          break;\r\n        case ParseState.comment:\r\n          {\r\n            // the initial * are always the first * of a comment, and will be treated as decorative\r\n            let asterisk = this.eatWhile('*');\r\n            if ((noClosingSymbolAsterixPrereq || asterisk.length > 0) && this.eat('/')) {\r\n              // encountered closing comment tag\r\n              comment = bank.join('').trim();\r\n              bank = [];\r\n              this._state = ParseState.default;\r\n              break;\r\n            }\r\n            noClosingSymbolAsterixPrereq = false;\r\n\r\n            bank.push(this.eatUntil(/[\\n\\*]/));\r\n            if (this.peek() === '*') {\r\n              let tmp = this.eatWhile('*');\r\n              if (this.peek() !== '/') {\r\n                // encountered a line like \"* This is a comment with asterisks in the middle **** like this.\"\r\n                bank.push(tmp);\r\n              } else {\r\n                noClosingSymbolAsterixPrereq = true;\r\n              }\r\n            } else if (this.peek() === '\\n') {\r\n              // go to next line\r\n              this.eatSpacesAndNewlines();\r\n            }\r\n          }\r\n          break;\r\n        case ParseState.declaration:\r\n          {\r\n            this.eatSpacesAndNewlines();\r\n            let tmp = this.eatUntil(/[,\\s]/);\r\n            this.next();\r\n            identifierName = tmp.trim();\r\n\r\n            this._state = ParseState.default;\r\n            returnResult.push(<IEnumProperty>{\r\n              description: comment,\r\n              name: identifierName,\r\n            });\r\n\r\n            comment = identifierName = '';\r\n            break;\r\n          }\r\n      }\r\n    } while (this.hasNext());\r\n    return returnResult;\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}