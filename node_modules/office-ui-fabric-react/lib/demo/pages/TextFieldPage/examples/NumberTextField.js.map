{"version":3,"sources":["demo/pages/TextFieldPage/examples/NumberTextField.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAGO,mBAAmB,CAAC,CAAA;AAC3B,QAAO,wBAAwB,CAAC,CAAA;AAWhC;IAAqC,mCAA6D;IAChG,yBAAY,KAAK;QACf,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzC,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7C,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEvD,IAAI,CAAC,KAAK,GAAG;YACX,KAAK,EAAE,KAAK,CAAC,YAAY;SAC1B,CAAC;IACJ,CAAC;IAEM,gCAAM,GAAb;QACE,MAAM,CAAC,CACL,qBAAC,GAAG,IAAC,SAAS,EAAC,iBAAiB;YAC9B,oBAAC,iBAAS,GACR,SAAS,EAAC,2BAA2B,EACrC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EACxB,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAM,EACxB,SAAS,EAAE,IAAI,CAAC,UAAW,EAC3B,iBAAiB,EAAE,IAAI,CAAC,eAAgB,EACxC;YACF,qBAAC,GAAG,IAAC,SAAS,EAAC,+BAA+B;gBAC5C,oBAAC,cAAM,GAAC,OAAO,EAAE,IAAI,CAAC,QAAS,GAC7B,SACF,CAAS;aACL,CACF,CACP,CAAC;IACJ,CAAC;IAEO,yCAAe,GAAvB,UAAwB,KAAa;QACnC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;cACvB,6CAA2C,KAAK,MAAG;cACnD,EAAE,CAAC;IACT,CAAC;IAEO,oCAAU,GAAlB,UAAmB,KAAa;QAC9B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;YACnB,YAAK;SACN,CAAC,CAAC;IACL,CAAC;IAEO,kCAAQ,GAAhB;QACE,IAAI,CAAC,QAAQ,CAAC;YACZ,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY;SAC/B,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAjDA,AAiDC,CAjDoC,KAAK,CAAC,SAAS,GAiDnD;AAjDY,uBAAe,kBAiD3B,CAAA","file":"demo/pages/TextFieldPage/examples/NumberTextField.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Button,\r\n  TextField\r\n} from '../../../../index';\r\nimport './NumberTextField.scss';\r\n\r\nexport interface INumberTextFieldProps {\r\n  label: string;\r\n  initialValue: string;\r\n}\r\n\r\nexport interface INumberTextFieldState {\r\n  value: string;\r\n}\r\n\r\nexport class NumberTextField extends React.Component<INumberTextFieldProps, INumberTextFieldState> {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this._restore = this._restore.bind(this);\r\n    this._onChanged = this._onChanged.bind(this);\r\n    this._validateNumber = this._validateNumber.bind(this);\r\n\r\n    this.state = {\r\n      value: props.initialValue\r\n    };\r\n  }\r\n\r\n  public render(): JSX.Element {\r\n    return (\r\n      <div className='NumberTextField'>\r\n        <TextField\r\n          className='NumberTextField-textField'\r\n          label={this.props.label}\r\n          value={this.state.value}\r\n          onChanged={this._onChanged}\r\n          onGetErrorMessage={this._validateNumber}\r\n        />\r\n        <div className='NumberTextField-restoreButton'>\r\n          <Button onClick={this._restore}>\r\n            Restore\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _validateNumber(value: string): string {\r\n    return isNaN(Number(value))\r\n      ? `The value should be a number, actual is ${value}.`\r\n      : '';\r\n  }\r\n\r\n  private _onChanged(value: string): void {\r\n    return this.setState({\r\n      value\r\n    });\r\n  }\r\n\r\n  private _restore(): void {\r\n    this.setState({\r\n      value: this.props.initialValue\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}