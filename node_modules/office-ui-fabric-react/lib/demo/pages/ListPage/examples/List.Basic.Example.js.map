{"version":3,"sources":["demo/pages/ListPage/examples/List.Basic.Example.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAOO,mBAAmB,CAAC,CAAA;AAC3B,oBAAoB,2BAA2B,CAAC,CAAA;AAChD,oBAAuB,2BAA2B,CAAC,CAAA;AACnD,QAAO,2BAA2B,CAAC,CAAA;AAWnC;IAAsC,oCAA4C;IAChF,0BAAY,KAA6B;QACvC,kBAAM,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEzD,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,EAAE;YACd,KAAK,EAAE,KAAK,CAAC,KAAK;SACnB,CAAC;IACJ,CAAC;IAEM,iCAAM,GAAb;QACQ,oCAAoB,CAAgB;QACpC,4BAAK,CAAgB;QAC3B,IAAI,eAAe,GAAG,KAAK,CAAC,MAAM,KAAK,aAAa,CAAC,MAAM,GAAG,EAAE,GAAG,OAAM,KAAK,CAAC,MAAM,YAAS,aAAa,CAAC,MAAM,YAAU,CAAC;QAE7H,MAAM,CAAC,CACL,oBAAC,iBAAS,GAAC,SAAS,EAAG,0BAAkB,CAAC,QAAU;YAClD,oBAAC,iBAAS,GAAC,KAAK,EAAG,gBAAgB,GAAG,eAAiB,EAAC,cAAc,EAAG,IAAI,CAAC,gBAAkB,EAAG;YACjG,oBAAC,YAAI,GACH,KAAK,EAAG,KAAO,EACf,YAAY,EAAG,UAAC,IAAI,EAAE,KAAK,IAAK,OAAA,CAC9B,qBAAC,GAAG,IAAC,SAAS,EAAC,8BAA8B,GAAC,iBAAiB,GAAG,IAAM;gBACtE,oBAAC,aAAK,GACJ,SAAS,EAAC,+BAA+B,EACzC,GAAG,EAAG,IAAI,CAAC,SAAW,EACtB,KAAK,EAAG,EAAI,EACZ,MAAM,EAAG,EAAI,EACb,QAAQ,EAAG,gBAAQ,CAAC,KAAO,EAC1B;gBACH,qBAAC,GAAG,IAAC,SAAS,EAAC,iCAAiC;oBAC9C,qBAAC,GAAG,IAAC,SAAS,EAAC,yCAAyC,GAAG,IAAI,CAAC,IAAM,CAAM;oBAC5E,qBAAC,GAAG,IAAC,SAAS,EAAC,+BAA+B,GAAG,UAAS,KAAU,CAAM;oBAC1E,qBAAC,GAAG,IAAC,SAAS,EAAC,wCAAwC,GAAG,IAAI,CAAC,WAAa,CAAM,CAC9E;gBACN,qBAAC,CAAC,IAAC,SAAS,EAAG,SAAG,CAAC,qCAAqC,EAAE;oBACxD,uBAAuB,EAAE,CAAC,YAAM,EAAE;oBAClC,sBAAsB,EAAE,YAAM,EAAE;iBACjC,CAAG,EAAG,CACH,CACP,EAnB+B,CAmB7B,EACH,CACQ,CACf,CAAC;IACJ,CAAC;IAEO,2CAAgB,GAAxB,UAAyB,IAAY;QAC7B,4BAAK,CAAgB;QAE3B,IAAI,CAAC,QAAQ,CAAC;YACZ,UAAU,EAAE,IAAI;YAChB,KAAK,EAAE,IAAI;gBACT,KAAK,CAAC,MAAM,CAAC,UAAA,IAAI,IAAI,OAAA,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,EAAxD,CAAwD,CAAC;gBAC9E,KAAK;SACR,CAAC,CAAC;IACL,CAAC;IACH,uBAAC;AAAD,CAzDA,AAyDC,CAzDqC,KAAK,CAAC,SAAS,GAyDpD;AAzDY,wBAAgB,mBAyD5B,CAAA","file":"demo/pages/ListPage/examples/List.Basic.Example.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  FocusZone,\r\n  FocusZoneDirection,\r\n  TextField,\r\n  Image,\r\n  ImageFit,\r\n  List\r\n} from '../../../../index';\r\nimport { css } from '../../../../utilities/css';\r\nimport { getRTL } from '../../../../utilities/rtl';\r\nimport './List.Basic.Example.scss';\r\n\r\nexport interface IListBasicExampleProps {\r\n  items: any[];\r\n}\r\n\r\nexport interface IListBasicExampleState {\r\n  filterText?: string;\r\n  items?: any[];\r\n}\r\n\r\nexport class ListBasicExample extends React.Component<IListBasicExampleProps, any> {\r\n  constructor(props: IListBasicExampleProps) {\r\n    super(props);\r\n\r\n    this._onFilterChanged = this._onFilterChanged.bind(this);\r\n\r\n    this.state = {\r\n      filterText: '',\r\n      items: props.items\r\n    };\r\n  }\r\n\r\n  public render() {\r\n    let { items: originalItems } = this.props;\r\n    let { items } = this.state;\r\n    let resultCountText = items.length === originalItems.length ? '' : ` (${ items.length } of ${ originalItems.length } shown)`;\r\n\r\n    return (\r\n      <FocusZone direction={ FocusZoneDirection.vertical }>\r\n        <TextField label={ 'Filter by name' + resultCountText } onBeforeChange={ this._onFilterChanged } />\r\n          <List\r\n            items={ items }\r\n            onRenderCell={ (item, index) => (\r\n              <div className='ms-ListBasicExample-itemCell' data-is-focusable={ true }>\r\n                <Image\r\n                  className='ms-ListBasicExample-itemImage'\r\n                  src={ item.thumbnail }\r\n                  width={ 50 }\r\n                  height={ 50 }\r\n                  imageFit={ ImageFit.cover }\r\n                 />\r\n                <div className='ms-ListBasicExample-itemContent'>\r\n                  <div className='ms-ListBasicExample-itemName ms-font-xl'>{ item.name }</div>\r\n                  <div className='ms-ListBasicExample-itemIndex'>{ `Item ${ index }` }</div>\r\n                  <div className='ms-ListBasicExample-itemDesc ms-font-s'>{ item.description }</div>\r\n                </div>\r\n                <i className={ css('ms-ListBasicExample-chevron ms-Icon', {\r\n                  'ms-Icon--chevronRight': !getRTL(),\r\n                  'ms-Icon--chevronLeft': getRTL()\r\n                }) } />\r\n              </div>\r\n            ) }\r\n          />\r\n        </FocusZone>\r\n    );\r\n  }\r\n\r\n  private _onFilterChanged(text: string) {\r\n    let { items } = this.props;\r\n\r\n    this.setState({\r\n      filterText: text,\r\n      items: text ?\r\n        items.filter(item => item.name.toLowerCase().indexOf(text.toLowerCase()) >= 0) :\r\n        items\r\n    });\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}