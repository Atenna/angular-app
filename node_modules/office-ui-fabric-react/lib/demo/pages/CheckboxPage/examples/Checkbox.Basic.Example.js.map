{"version":3,"sources":["demo/pages/CheckboxPage/examples/Checkbox.Basic.Example.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,yBAEO,sBAAsB,CAAC,CAAA;AAM9B;IAA0C,wCAA+C;IACvF;QACE,iBAAO,CAAC;QAER,IAAI,CAAC,KAAK,GAAG;YACX,SAAS,EAAE,KAAK;SACjB,CAAC;QAEF,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAC7D,CAAC;IAEM,qCAAM,GAAb;QAAA,iBA8BC;QA7BO,oCAAS,CAAgB;QAE/B,MAAM,CAAC,CACL,qBAAC,GAAG;YACF,oBAAC,mBAAQ,GACP,KAAK,EAAC,uBAAuB,EAC7B,QAAQ,EAAG,IAAI,CAAC,iBAAmB,EACnC,UAAU,EAAG;gBACX,OAAO,EAAE,cAAQ,OAAO,CAAC,GAAG,CAAC,kCAAkC,CAAC,CAAC,CAAC,CAAC;gBACnE,MAAM,EAAE,cAAQ,OAAO,CAAC,GAAG,CAAC,iCAAiC,CAAC,CAAC,CAAC,CAAC;aAChE,EAAG;YAER,oBAAC,mBAAQ,GACP,KAAK,EAAC,gDAAgD,EACtD,cAAc,EAAG,IAAM,EACvB,QAAQ,EAAG,IAAI,CAAC,iBAAmB,EAAG;YAExC,oBAAC,mBAAQ,GACP,KAAK,EAAC,yDAAyD,EAC/D,QAAQ,EAAG,IAAM,EACjB,cAAc,EAAG,IAAM,EACvB,QAAQ,EAAG,IAAI,CAAC,iBAAmB,EAAG;YAExC,oBAAC,mBAAQ,GACP,KAAK,EAAC,qBAAqB,EAC3B,OAAO,EAAG,SAAW,EACrB,QAAQ,EAAG,UAAC,EAAE,EAAE,OAAO,IAAK,OAAA,KAAI,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,CAAC,EAArC,CAAuC,EAAG,CACpE,CACP,CAAC;IACJ,CAAC;IAEO,gDAAiB,GAAzB,UAA0B,EAAgC,EAAE,SAAkB;QAC5E,OAAO,CAAC,GAAG,CAAC,oCAAkC,SAAS,MAAG,CAAC,CAAC;IAC9D,CAAC;IAEH,2BAAC;AAAD,CA/CA,AA+CC,CA/CyC,KAAK,CAAC,SAAS,GA+CxD;AA/CY,4BAAoB,uBA+ChC,CAAA","file":"demo/pages/CheckboxPage/examples/Checkbox.Basic.Example.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  Checkbox\r\n} from '../../../../Checkbox';\r\n\r\nexport interface ICheckboxBasicExampleState {\r\n  isChecked: boolean;\r\n}\r\n\r\nexport class CheckboxBasicExample extends React.Component<{}, ICheckboxBasicExampleState> {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      isChecked: false\r\n    };\r\n\r\n    this._onCheckboxChange = this._onCheckboxChange.bind(this);\r\n  }\r\n\r\n  public render() {\r\n    let { isChecked } = this.state;\r\n\r\n    return (\r\n      <div>\r\n        <Checkbox\r\n          label='Uncontrolled checkbox'\r\n          onChange={ this._onCheckboxChange }\r\n          inputProps={ {\r\n            onFocus: () => { console.log('Uncontrolled checkbox is focused'); },\r\n            onBlur: () => { console.log('Uncontrolled checkbox is blured'); }\r\n          } } />\r\n\r\n        <Checkbox\r\n          label='Uncontrolled checkbox with defaultChecked true'\r\n          defaultChecked={ true }\r\n          onChange={ this._onCheckboxChange } />\r\n\r\n        <Checkbox\r\n          label='Disabled uncontrolled checkbox with defaultChecked true'\r\n          disabled={ true }\r\n          defaultChecked={ true }\r\n          onChange={ this._onCheckboxChange } />\r\n\r\n        <Checkbox\r\n          label='Controlled checkbox'\r\n          checked={ isChecked }\r\n          onChange={ (ev, checked) => this.setState({ isChecked: checked }) } />\r\n      </div>\r\n    );\r\n  }\r\n\r\n  private _onCheckboxChange(ev: React.FormEvent<HTMLElement>, isChecked: boolean) {\r\n    console.log(`The option has been changed to ${isChecked}.`);\r\n  }\r\n\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\..\\src"}