{"version":3,"sources":["demo/pages/CheckboxPage/CheckboxPage.tsx"],"names":[],"mappings":";;;;;;AAAA,IAAY,KAAK,WAAM,OAAO,CAAC,CAAA;AAC/B,sBAIO,wBAAwB,CAAC,CAAA;AAEhC,uCAAqC,mCAAmC,CAAC,CAAA;AACzE,0BAAsC,2BAA2B,CAAC,CAAA;AAClE,yBAAyB,+BAA+B,CAAC,CAAA;AAGzD,IAAM,wBAAwB,GAAG,OAAO,CAAC,uCAAuC,CAAC,CAAC;AAElF;IAAkC,gCAA6C;IAG7E;QACE,iBAAO,CAAC;QACR,IAAI,CAAC,IAAI,GAAG,iCAAqB,CAAC,mBAAQ,EAAE,kBAAkB,EAAE,UAAU,CAAC,CAAC;IAC9E,CAAC;IAEM,6BAAM,GAAb;QACE,MAAM,CAAC,CACL,oBAAC,qBAAa,GACZ,KAAK,EAAC,UAAU,EAChB,aAAa,EAAC,iBAAiB,EAC/B,YAAY,EACV,oBAAC,mBAAW,GAAC,KAAK,EAAC,YAAY,EAAC,IAAI,EAAG,wBAA0B;YAC/D,oBAAC,6CAAoB,OAAG;SAE3B,EACD,gBAAgB,EACd,oBAAC,0BAAkB,GAAC,aAAa,EAAC,UAAU,EAC7C,EACD,QAAQ,EACN,qBAAC,GAAG;YACF,qBAAC,CAAC,SACA,sQACF,CAAI;YAEJ,qBAAC,CAAC,SACA,qNACF,CAAI;YAEJ,qBAAC,CAAC,SACA,uIACF,CAAI;YAEJ,qBAAC,CAAC,SACA,oWACF,CAAI;YAEJ,qBAAC,CAAC,SACA,uJACF,CAAI,CAEP,EACD,aAAa,EACX,qBAAC,GAAG,QACL,EACD,GAAG,EACD,qBAAC,GAAG;YACF,qBAAC,EAAE;gBACD,qBAAC,EAAE,SAAC,gGAA8F,CAAK;aACpG;SAER,EACD,KAAK,EACH,qBAAC,GAAG;YACF,qBAAC,EAAE;gBACD,qBAAC,EAAE,SAAC,yEAAuE,CAAK;gBAChF,qBAAC,EAAE,SAAC,0GAAwG,CAAK;gBACjH,qBAAC,EAAE,SAAC,6FAA2F,CAAK,CACjG;SAER,EACD,OAAO,EACL,qBAAC,CAAC,IAAC,IAAI,EAAC,4FAA4F,GAAC,WAAS,CAC/G,EACD,KAAK,EAAG,IAAI,CAAC,IAAM,EACnB,eAAe,EAAG,IAAI,CAAC,KAAK,CAAC,eAAiB,EAChC,CACjB,CAAC;IACJ,CAAC;IACH,mBAAC;AAAD,CAvEA,AAuEC,CAvEiC,KAAK,CAAC,SAAS,GAuEhD;AAvEY,oBAAY,eAuExB,CAAA","file":"demo/pages/CheckboxPage/CheckboxPage.js","sourcesContent":["import * as React from 'react';\r\nimport {\r\n  ExampleCard,\r\n  PropertiesTableSet,\r\n  ComponentPage\r\n} from '../../components/index';\r\n\r\nimport { CheckboxBasicExample } from './examples/Checkbox.Basic.Example';\r\nimport { getPageRouteFromState } from '../../utilities/pageroute';\r\nimport { AppState } from '../../components/App/AppState';\r\nimport { IComponentDemoPageProps } from '../../components/ComponentPage/IComponentDemoPageProps';\r\n\r\nconst CheckboxBasicExampleCode = require('./examples/Checkbox.Basic.Example.tsx');\r\n\r\nexport class CheckboxPage extends React.Component<IComponentDemoPageProps, any> {\r\n  private _url: string;\r\n\r\n  constructor() {\r\n    super();\r\n    this._url = getPageRouteFromState(AppState, 'Basic components', 'Checkbox');\r\n  }\r\n\r\n  public render() {\r\n    return (\r\n      <ComponentPage\r\n        title='Checkbox'\r\n        componentName='CheckboxExample'\r\n        exampleCards={\r\n          <ExampleCard title='Checkboxes' code={ CheckboxBasicExampleCode }>\r\n            <CheckboxBasicExample />\r\n          </ExampleCard>\r\n        }\r\n        propertiesTables={\r\n          <PropertiesTableSet componentName='Checkbox' />\r\n        }\r\n        overview={\r\n          <div>\r\n            <p>\r\n              A Checkbox is a UI element that allows users to switch between two mutually exclusive options (checked or unchecked, on or off) through a single click or tap. It can also be used to indicate a subordinate setting or preference when paired with another control.\r\n            </p>\r\n\r\n            <p>\r\n              A Checkbox is used to select or deselect action items. It can be used for a single item or for a list of multiple items that a user can choose from. The control has two selection states: unselected and selected.\r\n            </p>\r\n\r\n            <p>\r\n              Use a single Checkbox for a subordinate setting, such as with a \"Remember me?\" login scenario or with a terms of service agreement.\r\n            </p>\r\n\r\n            <p>\r\n              For a binary choice, the main difference between a Checkbox and a toggle switch is that the Checkbox is for status and the toggle switch is for action. You can delay committing a Checkbox interaction (as part of a form submit, for example), while you should immediately commit a toggle switch interaction. Also, only Checkboxes allow for multi-selection.\r\n            </p>\r\n\r\n            <p>\r\n              Use multiple Checkboxes for multi-select scenarios in which a user chooses one or more items from a group of choices that are not mutually exclusive.\r\n            </p>\r\n          </div>\r\n        }\r\n        bestPractices={\r\n          <div></div>\r\n        }\r\n        dos={\r\n          <div>\r\n            <ul>\r\n              <li>Allow users to choose any combination of options when several Checkboxes are grouped together.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        donts={\r\n          <div>\r\n            <ul>\r\n              <li>Don't use a Checkbox as an on/off control. Instead use a toggle switch.</li>\r\n              <li>Donâ€™t use a Checkbox when the user can choose only one option from the group, use radio buttons instead.</li>\r\n              <li>Don't put two groups of Checkboxes next to each other. Separate the two groups with labels.</li>\r\n            </ul>\r\n          </div>\r\n        }\r\n        related={\r\n          <a href='https://github.com/OfficeDev/office-ui-fabric-js/blob/master/ghdocs/components/Checkbox.md'>Fabric JS</a>\r\n        }\r\n        route={ this._url }\r\n        isHeaderVisible={ this.props.isHeaderVisible }>\r\n      </ComponentPage>\r\n    );\r\n  }\r\n}\r\n"],"sourceRoot":"..\\..\\..\\..\\src"}