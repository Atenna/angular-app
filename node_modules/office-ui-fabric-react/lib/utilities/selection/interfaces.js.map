{"version":3,"sources":["utilities/selection/interfaces.ts"],"names":[],"mappings":";AAIa,wBAAgB,GAAG,QAAQ,CAAC;AAEzC,WAAY,aAAa;IACvB,iDAAI,CAAA;IACJ,qDAAM,CAAA;IACN,yDAAQ,CAAA;AACV,CAAC,EAJW,qBAAa,KAAb,qBAAa,QAIxB;AAJD,IAAY,aAAa,GAAb,qBAIX,CAAA;AAkDD,WAAY,kBAAkB;IAC5B,uEAAc,CAAA;IACd,mEAAY,CAAA;AACd,CAAC,EAHW,0BAAkB,KAAlB,0BAAkB,QAG7B;AAHD,IAAY,kBAAkB,GAAlB,0BAGX,CAAA","file":"utilities/selection/interfaces.js","sourcesContent":["export interface IObjectWithKey {\r\n  key?: string;\r\n}\r\n\r\nexport const SELECTION_CHANGE = 'change';\r\n\r\nexport enum SelectionMode {\r\n  none,\r\n  single,\r\n  multiple\r\n}\r\n\r\nexport interface ISelection {\r\n  count: number;\r\n  canSelectItem?: (item: IObjectWithKey) => boolean;\r\n\r\n  // Obesrvable methods.\r\n  setChangeEvents(isEnabled: boolean, suppressChange?: boolean);\r\n\r\n  // Initialization methods.\r\n\r\n  setItems(items: IObjectWithKey[], shouldClear: boolean);\r\n  getItems(): IObjectWithKey[];\r\n\r\n  // Read selection methods.\r\n\r\n  getSelection(): IObjectWithKey[];\r\n  getSelectedCount(): number;\r\n  isRangeSelected(fromIndex: number, count: number): boolean;\r\n\r\n  isAllSelected(): boolean;\r\n  isKeySelected(key: string): boolean;\r\n  isIndexSelected(index: number): boolean;\r\n\r\n  // Write selection methods.\r\n\r\n  setAllSelected(isAllSelected: boolean);\r\n  setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean);\r\n  setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean);\r\n\r\n  // Write range selection methods.\r\n\r\n  selectToKey(key: string, clearSelection?: boolean);\r\n  selectToIndex(index: number, clearSelection?: boolean);\r\n\r\n  // Toggle helpers.\r\n\r\n  toggleAllSelected();\r\n  toggleKeySelected(key: string);\r\n  toggleIndexSelected(index: number);\r\n  toggleRangeSelected(fromIndex: number, count: number);\r\n}\r\n\r\nexport interface ISelectionLayout {\r\n  getItemIndexAbove(index: number, items: any[]): number;\r\n  getItemIndexBelow(index: number, items: any[]): number;\r\n  getItemIndexLeft(index: number, items: any[]): number;\r\n  getItemIndexRight(index: number, items: any[]): number;\r\n}\r\n\r\nexport enum SelectionDirection {\r\n  horizontal = 0,\r\n  vertical = 1\r\n}\r\n"],"sourceRoot":"..\\..\\..\\src"}